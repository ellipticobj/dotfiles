{"command.restartServer":"Server neu starten","extension.description":"Unterstützung für die Typüberprüfung für Python-Dateien über Mypy.","settings.args.description":"Argumente, die an Mypy übergeben werden, um die Typüberprüfung für Python-Dateien zu aktivieren. Jedes Argument sollte als separate Zeichenfolge im Array bereitgestellt werden. \n Beispiel: \n `\"mypy-type-checker.args\" = [\"--config-file=<file>\"]`","settings.cwd.description":"Legt das aktuelle Arbeitsverzeichnis fest, das zum Linten von Python-Dateien mit Mypy verwendet wird. Standardmäßig wird das Stammverzeichnis des Arbeitsbereichs „${workspaceFolder}“ verwendet. Sie können es auf „${fileDirname}“ festlegen, um den übergeordneten Ordner der Datei zu verwenden, die als Arbeitsverzeichnis für Mypy gelintet wird. Sie können sie auch auf „${nearestConfig}“ festlegen, um den nächsten übergeordneten/Vorgängerordner zu verwenden, der die Datei „pyproject.toml“ oder „mypy.ini“ enthält.","settings.daemonStatusFile.description":"Pfad zu der vom Mypy-Daemon (`dmypy`) verwendeten Statusdatei.","settings.ignorePatterns.description":"Konfigurieren Sie [Globmuster](https://docs.python.org/3/library/fnmatch.html) wie von der fnmatch-Python-Bibliothek unterstützt, um Dateien oder Ordner vom Linten mit Mypy auszuschließen.","settings.importStrategy.description":"Definiert, welche Mypy-Binärdatei zum Eingeben von Python-Überprüfungsdateien verwendet werden soll. Bei Festlegung auf \"useBundled\" verwendet die Erweiterung die Mypy-Binärdatei, die mit der Erweiterung ausgeliefert wird. Bei Festlegung auf \"fromEnvironment\" versucht die Erweiterung, die Mypy-Binärdatei und alle Abhängigkeiten zu verwenden, die in der aktuell ausgewählten Umgebung verfügbar sind. <br> Hinweis: Wenn die Erweiterung in der ausgewählten Umgebung keine gültige Mypy-Binärdatei finden kann, wird ein Fallback auf die Verwendung der Mypy-Binärdatei ausgeführt, die mit der Erweiterung ausgeliefert wird. Die Einstellung \"mypy-type-checker.path\" hat Vorrang und überschreibt das Verhalten von \"mypy-type-checker.importStrategy\".","settings.importStrategy.fromEnvironment.description":"Verwenden Sie Mypy aus der ausgewählten Umgebung. Wenn die Erweiterung keine gültige Mypy-Binärdatei findet, wird ein Fallback auf die Verwendung der gebündelten Version von Mypy ausgeführt.","settings.importStrategy.useBundled.description":"Verwenden Sie immer die gebündelte Version von Mypy, die mit der Erweiterung ausgeliefert wird.","settings.interpreter.description":"Pfad zu einer ausführbaren Python-Datei oder zu einem Befehl, der zum Starten des Mypy-Servers und eines beliebigen Unterprozesses verwendet wird. Akzeptiert ein Array aus einer einzelnen oder mehreren Zeichenfolgen. Bei Festlegung auf \"[]\" verwendet die Erweiterung den Pfad zum ausgewählten Python-Interpreter. Wenn Sie einen Befehl übergeben, sollte jedes Argument als separate Zeichenfolge im Array bereitgestellt werden.","settings.path.description":"Pfad oder Befehl, der von der Erweiterung zur Typüberprüfung von Python-Dateien mit Mypy verwendet werden soll. Akzeptiert ein Array aus einer einzelnen oder mehreren Zeichenfolgen. Wenn Sie einen Befehl übergeben, sollte jedes Argument als separate Zeichenfolge im Array bereitgestellt werden. Bei Festlegung auf \"[\"mypy\"]\" wird die Version von Mypy verwendet, die in der Umgebungsvariablen \"PATH\" verfügbar ist. <br> Hinweis: Die Verwendung dieser Option kann die Typüberprüfung verlangsamen. \n Beispiele: \n– `[\"~/global_env/mypy\"]` \n– `[\"conda\", \"run\", \"-n\", \"lint_env\", \"python\", \"-m\", \"mypy\"]`","settings.preferDaemon.description":"Gibt an, ob der Mypy-Daemon (\"dmypy\") bei der Typüberprüfung Vorrang vor \"mypy\" hat. <br> Hinweis: Wenn \"mypy-type-checker.reportingScope\" auf \"workspace\" festgelegt ist, bietet das Aktivieren des Mypy-Daemons eine schnellere Typüberprüfung. Diese Einstellung wird überschrieben, wenn \"mypy-type-checker.path\" festgelegt ist.","settings.reportingScope.description":"Steuert den Umfang der Mypy-Problemberichterstattung. Wenn \"file\" festgelegt ist, beschränkt Mypy die Problemberichterstattung auf die Dateien, die derzeit im Editor geöffnet sind. Wenn \"workspace\" festgelegt ist, erweitert Mypy die Problemberichterstattung so, dass alle Dateien im Arbeitsbereich enthalten sind.             ","settings.reportingScope.file.description":"Probleme werden nur für die im Editor geöffneten Dateien gemeldet.","settings.reportingScope.workspace.description":"Probleme werden für alle Dateien im Arbeitsbereich gemeldet.","settings.severity.description":"Zuordnung der Nachrichtentypen von Mypy zu den Diagnoseschweregraden VS Code, wie im Fenster \"Probleme\" angezeigt. Sie können damit auch bestimmte Mypy-Fehlercodes überschreiben. <br>Beispiel: \"{\"error\": \"Error\", \"note\": \"Information\", \"name-defined\": \"Warning\" }\"","settings.showNotifications.always.description":"Benachrichtigungen für Fehler und Warnungen anzeigen.","settings.showNotifications.description":"Steuert, wann Benachrichtigungen von dieser Erweiterung angezeigt werden.","settings.showNotifications.off.description":"Nie eine Benachrichtigung anzeigen. Alle Fehler oder Warnungen sind weiterhin in den Protokollen verfügbar.","settings.showNotifications.onError.description":"Benachrichtigungen für Fehler anzeigen.","settings.showNotifications.onWarning.description":"Benachrichtigungen für Fehler und Warnungen anzeigen."}
