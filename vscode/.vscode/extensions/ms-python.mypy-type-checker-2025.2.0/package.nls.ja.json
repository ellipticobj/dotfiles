{"command.restartServer":"サーバーの再起動","extension.description":"Mypy の使用による Python ファイルの型チェックのサポート。","settings.args.description":"Python ファイルの型チェックを有効にするために Mypy に渡される引数。各引数は、配列内の個別の文字列として指定する必要があります。\n例:\n`\"mypy-type-checker.args\" = [\"--config-file=<file>\"]`","settings.cwd.description":"Mypy で Python ファイルをリントするために使用される現在の作業ディレクトリを設定します。既定では、ワークスペース `${workspaceFolder}` のルート ディレクトリが使用されます。これを `${fileDirname}` に設定すると、Mypy の作業ディレクトリとしてリントされているファイルの親フォルダーを使用できます。また、`${nearestConfig}` に設定して、`pyproject.toml` または `mypy.ini` ファイルを含む最も近い親/先祖フォルダーを使用することもできます。","settings.daemonStatusFile.description":"Mypy デーモン ('dmypy') で使用される状態ファイルへのパス。","settings.ignorePatterns.description":"fnmatch Python ライブラリでサポートされている [glob パターン](https://docs.python.org/3/library/fnmatch.html) を構成して、ファイルまたはフォルダーが Mypy でリントされないようにします。","settings.importStrategy.description":"Python ファイルの型チェックにどの Mypy バイナリを使用するかを定義します。`useBundled` に設定すると、拡張機能は拡張機能に付属している Mypy バイナリを使用します。'fromEnvironment' に設定すると、拡張機能は Mypy バイナリと、現在選択されている環境で利用可能なすべての依存関係の使用を試みます。<br> 注意: 選択した環境で有効な Mypy バイナリが拡張機能で見つからない場合は、拡張機能に付属する Mypy バイナリの使用にフォールバックします。'mypy-type-checker.path' 設定が優先され、'mypy-type-checker.importStrategy' の動作がオーバーライドされます。","settings.importStrategy.fromEnvironment.description":"選択した環境から Mypy を使用します。拡張機能で有効な Mypy バイナリが見つからない場合、バンドルされたバージョンの Mypy の使用にフォールバックします。","settings.importStrategy.useBundled.description":"拡張機能に付属しているバンドルされたバージョンの Mypy を常に使用します。","settings.interpreter.description":"Python 実行可能ファイルまたは Mypy サーバーとサブプロセスの起動に使用されるコマンドへのパス。単一または複数の文字列の配列を受け入れます。`[]` に設定すると、拡張機能は選択した Python インタープリターへのパスを使用します。コマンドを渡す場合は、各引数を配列内の個別の文字列として指定する必要があります。","settings.path.description":"Mypy で Python ファイルを型チェックするための拡張機能で使用されるパスまたはコマンド。単一または複数の文字列の配列を受け入れます。コマンドを渡す場合は、各引数を配列内の個別の文字列として指定する必要があります。`[\"mypy\"]` に設定すると、`PATH` 環境変数で使用可能な Mypy のバージョンが使用されます。<br> 注意: このオプションを使用すると、型チェックが遅くなる可能性があります。\n例:\n- `[\"~/global_env/mypy\"]`\n- `[\"conda\", \"run\", \"-n\", \"lint_env\", \"python\", \"-m\", \"mypy\"]`","settings.preferDaemon.description":"Mypy デーモン ('dmypy') が型チェックのために 'mypy' よりも優先されるかどうか。<br> 注意: 'mypy-type-checker.reportingScope' が 'workspace' に設定されている場合、Mypy デーモンを有効にすると、より高速な型チェック エクスペリエンスが提供されます。`mypy-type-checker.path` が設定されている場合、この設定はオーバーライドされます。","settings.reportingScope.description":"Mypy の問題報告の範囲を制御します。`file` に設定すると、Mypy は問題報告をエディターで現在開いているファイルに制限します。`workspace` に設定すると、Mypy は問題報告を拡張してワークスペース内のすべてのファイルを含めます。             ","settings.reportingScope.file.description":"問題は、エディターで開いているファイルに対してのみ報告されます。","settings.reportingScope.workspace.description":"ワークスペース内のすべてのファイルに関する問題が報告されます。","settings.severity.description":"[問題] ウィンドウに表示される、Mypy のメッセージ型と VS Code の診断重大度レベルのマッピング。これを使用して、特定の Mypy エラー コードをオーバーライドすることもできます。<br>例: '{\"error\": \"Error\", \"note\": \"Information\", \"name-defined\": \"Warning\" }'","settings.showNotifications.always.description":"エラーと警告の通知を表示します。","settings.showNotifications.description":"この拡張機能によって通知が表示されるタイミングを制御します。","settings.showNotifications.off.description":"通知を表示しません。エラーまたは警告は、ログで引き続き使用できます。","settings.showNotifications.onError.description":"エラーに対する通知を表示します。","settings.showNotifications.onWarning.description":"エラーと警告の通知を表示します。"}
