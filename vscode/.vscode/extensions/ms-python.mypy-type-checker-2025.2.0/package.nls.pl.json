{"command.restartServer":"Ponowne uruchamianie serwera","extension.description":"Obsługa kontroli typów dla plików języka Python przy użyciu narzędzia Mypy.","settings.args.description":"Argumenty przekazane do pliku narzędzia Mypy w celu włączenia kontroli typów w plikach języka Python. Każdy argument powinien być podany jako oddzielny ciąg w tablicy. \n Przykład: \n „\"mypy-type-checker.args\" = [\"--config-file=<file>\"]”","settings.cwd.description":"Ustawia bieżący katalog roboczy używany do sprawdzania plików języka Python za pomocą narzędzia Mypy. Domyślnie używa katalogu głównego obszaru roboczego „${workspaceFolder}”. Możesz ustawić dla niego wartość „${fileDirname}”, aby użyć folderu nadrzędnego pliku, który jest sprawdzany, jako katalogu roboczego dla narzędzia Mypy. Możesz również ustawić wartość „${nearestConfig}”, aby użyć najbliższego folderu nadrzędnego, który zawiera plik „pyproject.toml” lub plik „mypy.ini”.","settings.daemonStatusFile.description":"Ścieżka do pliku stanu używanego przez demona Mypy (`dmypy`).","settings.ignorePatterns.description":"Skonfiguruj [wzorce globalne](https://docs.python.org/3/library/fnmatch.html) jako obsługiwane przez bibliotekę języka Python fnmatch, aby wykluczyć pliki lub foldery ze sprawdzania przez narzędzie Mypy.","settings.importStrategy.description":"Definiuje, który plik binarny narzędzia Mypy ma być używany do kontroli typów plików języka Python. Po ustawieniu wartości „useBundled” rozszerzenie będzie używać pliku binarnego narzędzia Mypy dostarczonego z rozszerzeniem. Po ustawieniu wartości „fromEnvironment” rozszerzenie podejmie próbę użycia pliku binarnego narzędzia Mypy i wszystkich zależności dostępnych w obecnie wybranym środowisku. <br> Uwaga: jeśli rozszerzenie nie może odnaleźć prawidłowego pliku binarnego narzędzia Mypy w wybranym środowisku, powróci do użycia pliku binarnego narzędzia Mypy dostarczonego z rozszerzeniem. Ustawienie „mypy-type-checker.path” ma pierwszeństwo i przesłania zachowanie metody „mypy-type-checker.importStrategy”.","settings.importStrategy.fromEnvironment.description":"Użyj narzędzia Mypy z wybranego środowiska. Jeśli rozszerzenie nie może odnaleźć prawidłowego pliku binarnego narzędzia Mypy, powróci do używania powiązanej wersji narzędzia Mypy.","settings.importStrategy.useBundled.description":"Zawsze używaj dołączonej wersji pliku narzędzia Mypy dostarczanej z rozszerzeniem.","settings.interpreter.description":"Ścieżka do pliku wykonywalnego języka Python lub polecenia, które będzie używane do uruchamiania serwera narzędzia Mypy i dowolnego podprocesu. Akceptuje tablicę jednego lub wielu ciągów. Po ustawieniu wartości „[]” rozszerzenie użyje ścieżki do wybranego interpretera języka Python. W przypadku przekazywania polecenia każdy argument powinien być dostarczany jako oddzielny ciąg w tablicy.","settings.path.description":"Ścieżka lub polecenie, które ma być używane przez rozszerzenie do kontroli typów plików języka Python za pomocą narzędzia Mypy. Akceptuje tablicę jednego lub wielu ciągów. W przypadku przekazywania polecenia każdy argument powinien być dostarczany jako oddzielny ciąg w tablicy. W przypadku ustawienia wartości „[\"mypy\"]” będzie używana wersja pliku narzędzia Mypy dostępna w zmiennej środowiskowej „PATH”. <br> Uwaga: użycie tej opcji może spowolnić kontrolę typów. \n Przykłady: \n— „[\"~/global_env/mypy\"]” \n— „[\"conda\", \"run\", \"-n\", \"lint_env\", \"python\", \"-m\", \"mypy\"]”","settings.preferDaemon.description":"Określa, czy demon narzędzia Mypy („dmypy”) będzie miał pierwszeństwo przed elementem „mypy” na potrzeby kontroli typów. <br> Uwaga: jeśli właściwość „mypy-type-checker.reportingScope” jest ustawiona na wartość „workspace”, włączenie demona narzędzia Mypy zapewni szybszą kontrolę typów. To ustawienie zostanie zastąpione, jeśli zostanie ustawiony parametr „mypy-type-checker.path”.","settings.reportingScope.description":"Steruje zakresem raportowania problemów narzędzia Mypy. Jeśli zostanie ustawiona wartość „plik”, narzędzie Mypy ograniczy raportowanie problemów do plików obecnie otwartych w edytorze. Jeśli zostanie ustawiona wartość „obszar roboczy”, narzędzie Mypy rozszerzy raportowanie problemów o wszystkie pliki w obszarze roboczym.             ","settings.reportingScope.file.description":"Problemy są zgłaszane tylko w przypadku plików otwartych w edytorze.","settings.reportingScope.workspace.description":"Problemy są zgłaszane dla wszystkich plików w obszarze roboczym.","settings.severity.description":"Mapowanie typów komunikatów narzędzia Mypy na poziomy ważności diagnostycznej programu VS Code, jak pokazano w oknie Problemy. Można go również użyć do zastąpienia określonych kodów błędów narzędzia Mypy. <br>Na przykład: „{\"error\": \"Error\", \"note\": \"Information\", \"name-defined\": \"Warning\" }”","settings.showNotifications.always.description":"Pokaż powiadomienia o błędach i ostrzeżeniach.","settings.showNotifications.description":"Określa, kiedy powiadomienia są wyświetlane przez to rozszerzenie.","settings.showNotifications.off.description":"Nigdy nie wyświetlaj powiadomienia. Wszelkie błędy lub ostrzeżenia są nadal dostępne w dziennikach.","settings.showNotifications.onError.description":"Pokaż powiadomienia o błędach.","settings.showNotifications.onWarning.description":"Pokaż powiadomienia o błędach i ostrzeżeniach."}
