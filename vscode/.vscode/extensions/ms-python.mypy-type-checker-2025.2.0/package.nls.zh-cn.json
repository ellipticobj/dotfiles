{"command.restartServer":"重启服务器","extension.description":"使用 Mypy 对 Python 文件提供类型检查支持。","settings.args.description":"传递给 Mypy 以启用对 Python 文件进行类型检查的参数。应在数组中将每个参数作为单独的字符串提供。\n示例:\n`\"mypy-type-checker.args\" = [\"--config-file=<file>\"]`","settings.cwd.description":"设置使用 Mypy 对 Python 文件进行 Lint 分析时所使用的当前工作目录。默认情况下，它使用工作区 `${workspaceFolder}` 的根目录。可以将其设置为 `${fileDirname}`，以使用进行 Lint 分析的文件的父文件夹作为 Mypy 的工作目录。还可将其设置为 `${nearestConfig}`，以使用包含 `pyproject.toml` 或 `mypy.ini` 文件的最近父级/上级文件夹。","settings.daemonStatusFile.description":"Mypy 守护程序(`dmypy`)使用的状态文件的路径。","settings.ignorePatterns.description":"根据 fnmatch Python 库的支持配置 [glob 模式](https://docs.python.org/3/library/fnmatch.html)，以便在使用 Mypy 进行 Lint 分析时排除文件或文件夹。","settings.importStrategy.description":"定义要用于对 Python 文件进行类型检查的 Mypy 二进制文件。当设置为 `useBundled` 时，扩展将使用随附于扩展的 Mypy 二进制文件。当设置为 `fromEnvironment` 时，扩展将尝试使用 Mypy 二进制文件和当前所选环境中可用的所有依赖项。<br> 注意: 如果扩展在所选环境中找不到有效的 Mypy 二进制文件，它将回退为使用随附于扩展的 Mypy 二进制文件。`mypy-type-checker.path` 设置优先，将替代 `mypy-type-checker.importStrategy` 的行为。","settings.importStrategy.fromEnvironment.description":"使用所选环境中的 Mypy。如果扩展找不到有效的 Mypy 二进制文件，它将回退到使用捆绑版 Mypy。","settings.importStrategy.useBundled.description":"始终使用随附于扩展的捆绑版 Mypy。","settings.interpreter.description":"Python 可执行文件或将用于启动 Mypy 服务器和任何子进程的命令的路径。接受单个或多个字符串的数组。设置为“[]”时，扩展将使用所选 Python 解释器的路径。如果传递命令，则应在数组中将每个参数作为单独的字符串提供。","settings.path.description":"扩展使用 Mypy 对 Python 文件进行类型检查时所使用的路径或命令。接受单个或多个字符串的数组。如果传递命令，则应在数组中将每个参数作为单独的字符串提供。如果设置为 `[\"mypy\"]`，它将使用 `PATH` 环境变量中可用的 Mypy 版本。<br> 注意: 使用此选项可能会减慢类型检查。\n示例:\n- `[\"~/global_env/mypy\"]`\n- `[\"conda\", \"run\", \"-n\", \"lint_env\", \"python\", \"-m\", \"mypy\"]`","settings.preferDaemon.description":"Mypy 守护程序(`dmypy`)是否优先于 `mypy` 进行类型检查。<br> 注意: 如果将 `mypy-type-checker.reportingScope` 设置为 `workspace`，启用 Mypy 守护程序将提供更快的类型检查体验。如果设置了 `mypy-type-checker.path`，则将重写此设置。","settings.reportingScope.description":"控制 Mypy 问题报告的范围。如果设置为 `file`，Mypy 会将其问题报告限制为当前在编辑器中打开的文件。如果设置为 `workspace`，Mypy 将扩展其问题报告以包括工作区中的所有文件。             ","settings.reportingScope.file.description":"仅报告在编辑器中打开的文件存在的问题。","settings.reportingScope.workspace.description":"报告工作区中所有文件的问题。","settings.severity.description":"将 Mypy 的消息类型映射到 VS Code 的诊断严重性级别，如“问题”窗口中所示。你还可以使用它来替代特定的 Mypy 错误代码。<br>例如：`{\"error\": \"Error\", \"note\": \"Information\", \"name-defined\": \"Warning\" }`","settings.showNotifications.always.description":"显示错误和警告通知。","settings.showNotifications.description":"控制此扩展显示通知的时间。","settings.showNotifications.off.description":"从不显示通知。任何错误或警告在日志中仍然可用。","settings.showNotifications.onError.description":"显示错误通知。","settings.showNotifications.onWarning.description":"显示错误和警告通知。"}
