{"command.restartServer":"Reiniciar Servidor","extension.description":"Suporte à verificação de tipos para arquivos do Python usando o Mypy.","settings.args.description":"Argumentos passados para o Mypy para habilitar a verificação de tipo em arquivos do Python. Cada argumento deverá ser fornecido como uma cadeia de caracteres separada na matriz. \n Exemplo: \n `\"mypy-type-checker.args\" = [\"--config-file=<file>\"]`","settings.cwd.description":"Define o diretório de trabalho atual usado para fazer o lint de arquivos do Python com o Mypy. Por padrão, ele usa o diretório raiz do workspace `${workspaceFolder}`. Você pode configurá-lo como `${fileDirname}` para usar a pasta pai do arquivo que está sendo lintado como o diretório de trabalho do Mypy. Você também pode defini-lo como `${nearestConfig}` para usar a pasta pai/ancestral mais próxima que contém um arquivo `pyproject.toml` ou `mypy.ini`.","settings.daemonStatusFile.description":"Caminho para o arquivo de status usado pelo daemon Mypy (`dmypy`).","settings.ignorePatterns.description":"Configure [padrões glob](https://docs.python.org/3/library/fnmatch.html) conforme suportado pela biblioteca Python fnmatch para excluir arquivos ou pastas de serem lintados com o Mypy.","settings.importStrategy.description":"Define qual binário do Flake8 será usado para digitar arquivos do Python de verificação. Quando definida como `useBundled`, a extensão usará o binário do Mypy que acompanha a extensão. Quando definida como `fromEnvironment`, a extensão tentará usar o binário do Mypy e todas as dependências disponíveis no ambiente atualmente selecionado. <br> Observação: se a extensão não conseguir encontrar um binário do Mypy válido no ambiente selecionado, ela voltará a usar o binário do Mypy fornecido com a extensão. A configuração `mypy-type-checker.path` tem precedência e substitui o comportamento de `mypy-type-checker.importStrategy`.","settings.importStrategy.fromEnvironment.description":"Use o Mypy do ambiente selecionado. Se a extensão não encontrar um binário do Mypy válido, ela voltará a usar a versão agrupada do Mypy.","settings.importStrategy.useBundled.description":"Sempre use a versão agrupada do Mypy fornecida com a extensão.","settings.interpreter.description":"Caminho para um executável do Python ou um comando que será usado para iniciar o servidor do Mypy e qualquer subprocesso. Aceita uma matriz de uma ou várias cadeias de caracteres. Quando definido como `[]`, a extensão usará o caminho para o interpretador do Python selecionado. Se passar um comando, cada argumento deverá ser fornecido como uma cadeia de caracteres separada na matriz.","settings.path.description":"Caminho ou comando a ser usado pela extensão para digitar a verificação de arquivos do Python com o Mypy. Aceita uma matriz de uma ou várias cadeias de caracteres. Se passar um comando, cada argumento deverá ser fornecido como uma cadeia de caracteres separada na matriz. Se definido como `[\"mypy\"]`, ele usará a versão do Mypy disponível na variável de ambiente `PATH`. <br> Observação: o uso dessa opção pode tornar a verificação de tipo mais lenta. \n Exemplos: \n- `[\"~/global_env/mypy\"]` \n- `[\"conda\", \"run\", \"-n\", \"lint_env\", \"python\", \"-m\", \"mypy\"]`","settings.preferDaemon.description":"Se o daemon do Mypy (`dmypy`) terá precedência sobre `mypy` para verificação de tipo. <br> Observação: se `mypy-type-checker.reportingScope` estiver definido como `workspace`, habilitar o daemon do Mypy oferecerá uma experiência de verificação de tipo mais rápida. Esta configuração será substituída se `mypy-type-checker.path` estiver definido.","settings.reportingScope.description":"Controla o escopo do relatório de problemas do Mypy. Se definido como `file`, o Mypy limitará o relatório de problemas aos arquivos atualmente abertos no editor. Se definido como 'workspace', o Mypy estenderá seu relatório de problemas para incluir todos os arquivos dentro do workspace.             ","settings.reportingScope.file.description":"Os problemas são relatados apenas para os arquivos abertos no editor.","settings.reportingScope.workspace.description":"Os problemas são relatados para todos os arquivos dentro do workspace.","settings.severity.description":"Mapeamento dos tipos de mensagens do Mypy para os níveis de gravidade de diagnóstico do VS Code, conforme exibido na janela Problemas. Você também pode usá-lo para substituir códigos de erro específicos do Mypy. <br>Por exemplo: `{\"error\": \"Error\", \"note\": \"Information\", \"name-defined\": \"Warning\" }`","settings.showNotifications.always.description":"Mostrar notificações de erros e avisos.","settings.showNotifications.description":"Controla quando as notificações são mostradas por esta extensão.","settings.showNotifications.off.description":"Nunca exibir uma notificação. Todos os erros ou avisos ainda estão disponíveis nos logs.","settings.showNotifications.onError.description":"Mostrar notificações de erros.","settings.showNotifications.onWarning.description":"Mostrar notificações de erros e avisos."}
