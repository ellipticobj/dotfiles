{"command.restartServer":"Reiniciar servidor","extension.description":"Compatibilidad con la comprobación de tipos de archivos de Python con Mypy.","settings.args.description":"Argumentos pasados a Mypy para habilitar la comprobación de tipos en archivos de Python. Cada argumento debe proporcionarse como una cadena independiente en la matriz. \n Ejemplo: \n `\"mypy-type-checker.args\" = [\"--config-file=<file>\"]`","settings.cwd.description":"Establece el directorio de trabajo actual usado para hacer linting con los archivos de Python con Mypy. De manera predeterminada, se utiliza el directorio raíz del área de trabajo \"${workspaceFolder}\". Puede establecerlo en \"${fileDirname}\" para usar la carpeta principal del archivo con el que se va a hacer linting como directorio de trabajo de Mypy. También puede establecerlo en `${nearestConfig}` para usar la carpeta principal o antecesora más cercana que contiene un archivo `pyproject.toml` o `mypy.ini`.","settings.daemonStatusFile.description":"Ruta de acceso al archivo de estado usado por el demonio de Mypy ('dmypy').","settings.ignorePatterns.description":"Configurar [patrones globales](https://docs.python.org/3/library/fnmatch.html) como admite la biblioteca de Python de fnmatch para excluir archivos o carpetas de la conexión con Mypy.","settings.importStrategy.description":"Define qué binario de Mypy se usará para escribir los archivos de Python de comprobación. Cuando se establece en \"useBundled\", la extensión usará el binario Mypy que se incluye con la extensión. Cuando se establece en \"fromEnvironment\", la extensión intentará usar el binario de Mypy y todas las dependencias disponibles en el entorno seleccionado actualmente. <br> Nota: Si la extensión no encuentra un binario de Mypy válido en el entorno seleccionado, volverá a usar el binario de Mypy que se incluye con la extensión. El valor \"mypy-type-checker.path\" tiene prioridad e invalida el comportamiento de \"mypy-type-checker.importStrategy\".","settings.importStrategy.fromEnvironment.description":"Use Mypy del entorno seleccionado. Si la extensión no encuentra un binario de Mypy válido, volverá a usar la versión empaquetada de Mypy.","settings.importStrategy.useBundled.description":"Use siempre la versión empaquetada de Mypy incluida con la extensión.","settings.interpreter.description":"Ruta de acceso a un ejecutable de Python o un comando que se usará para iniciar el servidor Mypy y cualquier subproceso. Acepta una matriz de una o varias cadenas. Cuando se establece en '[]', la extensión usará la ruta de acceso al intérprete de Python seleccionado. Si pasa un comando, cada argumento debe proporcionarse como una cadena independiente en la matriz.","settings.path.description":"Ruta de acceso o comando que usará la extensión para comprobar los tipos de archivos de Python con Mypy. Acepta una matriz de una o varias cadenas. Si pasa un comando, cada argumento debe proporcionarse como una cadena independiente en la matriz. Si se establece en \"[\"mypy\"]\", usará la versión de Mypy disponible en la variable de entorno \"PATH\". <br> Nota: El uso de esta opción puede ralentizar la comprobación de tipos. \n Ejemplos: \n- \"[\"~/global_env/mypy\"]\" \n- \"[\"conda\", \"run\", \"-n\", \"lint_env\", \"python\", \"-m\", \"mypy\"]\"","settings.preferDaemon.description":"Indica si el demonio de Mypy ('dmypy') tendrá prioridad sobre 'mypy' para la comprobación de tipos. <br> Nota: Si \"mypy-type-checker.reportingScope\" está establecido en \"workspace\", la habilitación del demonio de Mypy ofrecerá una experiencia de comprobación de tipos más rápida. Este valor se anulará si se establece \"mypy-type-checker.path\".","settings.reportingScope.description":"Controla el ámbito del informe de problemas de Mypy. Si se establece en \"file\", Mypy limitará el informe de problemas a los archivos abiertos actualmente en el editor. Si se establece en \"workspace\", Mypy ampliará el informe de problemas para incluir todos los archivos del área de trabajo.             ","settings.reportingScope.file.description":"Solo se notifican problemas de los archivos abiertos en el editor.","settings.reportingScope.workspace.description":"Se notifican problemas de los archivos del área de trabajo.","settings.severity.description":"Asignación de los tipos de mensaje de Mypy a los niveles de gravedad de diagnóstico de VS Code como se muestra en la ventana Problemas. También puede usarlo para invalidar códigos de error específicos de Mypy. <br>Por ejemplo: \"{\"error\": \"Error\", \"note\": \"Information\", \"name-defined\": \"Warning\" }\"","settings.showNotifications.always.description":"Se muestran notificaciones de errores y advertencias.","settings.showNotifications.description":"Controla cuándo se muestran las notificaciones mediante esta extensión.","settings.showNotifications.off.description":"No se muestra nunca una notificación. Los errores o advertencias aún están disponibles en los registros.","settings.showNotifications.onError.description":"Mostrar notificaciones de errores.","settings.showNotifications.onWarning.description":"Se muestran notificaciones de errores y advertencias."}
