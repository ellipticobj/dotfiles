{"command.restartServer":"서버 다시 시작","extension.description":"Mypy를 사용한 Python 파일에 대한 형식 검사 지원입니다.","settings.args.description":"Python 파일에서 형식 검사를 사용하도록 설정하기 위해 Mypy에 전달된 인수입니다. 각 인수는 배열에서 별도의 문자열로 제공되어야 합니다. \n 예: \n '\"mypy-type-checker.args\" = [\"--config-file=<file>\"]'","settings.cwd.description":"Mypy를 사용하여 Python 파일을 lint하는 데 사용되는 현재 작업 디렉터리를 설정합니다. 기본적으로 '${workspaceFolder}' 작업 영역의 루트 디렉터리를 사용합니다. Mypy의 작업 디렉터리로 lint되는 파일의 부모 폴더를 사용하려면 '${fileDirname}으로 설정할 수 있습니다. 'pyproject.toml' 또는 'mypy.ini' 파일이 포함된 가장 가까운 부모/상위 폴더를 사용하려면 '${nearestConfig}'로 설정할 수도 있습니다.","settings.daemonStatusFile.description":"Mypy 디먼(`dmypy`)에서 사용하는 상태 파일의 경로입니다.","settings.ignorePatterns.description":"fnmatch Python 라이브러리에서 지원하는 데로 [GLOB 패턴](https://docs.python.org/3/library/fnmatch.html)을 구성하여 파일 또는 폴더가 Mypy로 lint되지 않도록 제외합니다.","settings.importStrategy.description":"Python 파일을 유형 확인하는 데 사용할 Mypy 이진을 정의합니다. 'useBundled'로 설정하면 확장은 확장과 함께 제공되는 Mypy 이진을 사용합니다. 'fromEnvironment'로 설정하면 확장은 Mypy 이진과 현재 선택된 환경에서 사용할 수 있는 모든 종속성을 사용하려고 시도합니다. <br> 참고: 확장이 선택한 환경에서 유효한 Mypy 이진을 찾지 못하면 확장과 함께 제공되는 Mypy 이진을 사용하는 것으로 대체됩니다. 'mypy-type-checker.path' 설정이 우선적으로 적용되고 'mypy-type-checker.importStrategy'의 동작을 재정의합니다.","settings.importStrategy.fromEnvironment.description":"선택한 환경에서 Mypy를 사용합니다. 확장에서 유효한 Mypy 이진 파일을 찾지 못하면 번들된 버전의 Mypy를 사용하는 것으로 대체됩니다.","settings.importStrategy.useBundled.description":"항상 확장과 함께 제공되는 Mypy의 번들 버전을 사용합니다.","settings.interpreter.description":"Mypy 서버 및 하위 프로세스를 시작하는 데 사용할 Python 실행 파일 또는 명령의 경로입니다. 단일 또는 여러 문자열의 배열을 허용합니다. '[]'로 설정하면 확장에서 선택한 Python 인터프리터의 경로를 사용합니다. 명령을 전달하는 경우 각 인수는 배열에서 별도의 문자열로 제공되어야 합니다.","settings.path.description":"확장에서 Mypy를 사용하여 Python 파일을 형식 검사하는 데 사용할 경로 또는 명령입니다. 단일 또는 여러 문자열의 배열을 허용합니다. 명령을 전달하는 경우 각 인수는 배열에서 별도의 문자열로 제공되어야 합니다. '[\"mypy\"]'로 설정하면 'PATH' 환경 변수에서 사용할 수 있는 Mypy 버전을 사용합니다. <br> 참고: 이 옵션을 사용하면 형식 검사가 느려질 수 있습니다. \n 예: \n- '[\"~/global_env/mypy\"]' \n- '[\"conda\", \"run\", \"-n\", \"lint_env\", \"python\", \"-m\", \"mypy\"]'","settings.preferDaemon.description":"형식 검사에서 Mypy 디먼('dmypy')이 'mypy'보다 우선적으로 적용되는지 여부입니다. <br> 참고: 'mypy-type-checker.reportingScope'가 'workspace'로 설정된 경우 Mypy 디먼을 사용하도록 설정하면 더 빠른 형식 검사 환경이 제공됩니다. 'mypy-type-checker.path'가 설정된 경우 이 설정이 재정의됩니다.","settings.reportingScope.description":"Mypy의 문제 보고 범위를 제어합니다. 'file'로 설정하면 Mypy는 현재 편집기에서 열려 있는 파일로 문제 보고를 제한합니다. 'workspace'로 설정하면 Mypy는 작업 영역 내의 모든 파일을 포함하도록 문제 보고를 확장합니다.             ","settings.reportingScope.file.description":"편집기에서 열린 파일에 대해서만 문제가 보고됩니다.","settings.reportingScope.workspace.description":"작업 영역 내의 모든 파일에 대해 문제가 보고됩니다.","settings.severity.description":"문제 창에 표시된 대로 Mypy의 메시지 유형을 VS Code의 진단 심각도 수준에 매핑합니다. 특정 Mypy 오류 코드를 재정의하는 데 사용할 수도 있습니다. <br>예: '{\"error\": \"Error\", \"note\": \"Information\", \"name-defined\": \"Warning\" }'","settings.showNotifications.always.description":"오류 및 경고에 대한 알림을 표시합니다.","settings.showNotifications.description":"이 확장에서 알림을 표시하는 시기를 제어합니다.","settings.showNotifications.off.description":"알림을 표시하지 않습니다. 오류 또는 경고는 로그에서 계속 사용할 수 있습니다.","settings.showNotifications.onError.description":"오류에 대한 알림을 표시합니다.","settings.showNotifications.onWarning.description":"오류 및 경고에 대한 알림을 표시합니다."}
