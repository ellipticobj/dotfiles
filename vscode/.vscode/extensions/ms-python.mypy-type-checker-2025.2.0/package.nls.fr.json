{"command.restartServer":"Redémarrer le serveur","extension.description":"Prise en charge de la vérification des types pour les fichiers Python à l’aide de Mypy.","settings.args.description":"Arguments passés à Mypy pour activer la vérification des types sur les fichiers Python. Chaque argument doit être fourni en tant que chaîne distincte dans le tableau. \n Exemple : \n `\"mypy-type-checker.args\" = [\"--config-file=<file>\"]`","settings.cwd.description":"Définit le répertoire de travail en cours utilisé pour lister les fichiers Python avec Mypy. Par défaut, il utilise le répertoire racine de l’espace de travail `${workspaceFolder}`. Pour utiliser le répertoire parent du fichier en cours d’analyse comme répertoire de travail pour Mypy, vous pouvez définir la valeur `${fileDirname}`. Pour utiliser le dossier parent/ancêtre le plus proche contenant un fichier `pyproject.toml` ou `mypy.ini`, vous pouvez également définir la valeur `${nearestConfig}`.","settings.daemonStatusFile.description":"Chemin d’accès au fichier d’état utilisé par le démon Mypy (`dmypy`).","settings.ignorePatterns.description":"Configurez [modèles glob](https://docs.python.org/3/library/fnmatch.html) comme le fait la bibliothèque Python fnmatch pour exclure des fichiers ou des dossiers du linting avec Mypy.","settings.importStrategy.description":"Définit le binaire Mypy à utiliser pour taper des fichiers Python de vérification. Lorsque la valeur est « useBundled », l’extension utilise le fichier binaire Mypy fourni avec l’extension. Lorsqu’elle est définie sur « fromEnvironment », l’extension tente d’utiliser le binaire Mypy et toutes les dépendances disponibles dans l’environnement actuellement sélectionné. <br> Remarque : si l’extension ne trouve pas de fichier binaire Mypy valide dans l’environnement sélectionné, elle utilise celui fourni avec l’extension. Le paramètre « mypy-type-checker.path » est prioritaire et remplace le comportement de « mypy-type-checker.importStrategy ».","settings.importStrategy.fromEnvironment.description":"Utilisez Mypy à partir de l’environnement sélectionné. Si l’extension ne parvient pas à trouver un fichier binaire Mypy valide, elle utilise la version groupée de Mypy.","settings.importStrategy.useBundled.description":"Utilisez toujours la version groupée de Mypy fournie avec l’extension.","settings.interpreter.description":"Chemin d’un exécutable Python ou d’une commande qui sera utilisé pour lancer le serveur Mypy et tous les sous-processus. Accepte un tableau d’une ou plusieurs chaînes. Quand la valeur est '[]', l’extension utilise le chemin de l’interpréteur Python sélectionné. Si vous passez une commande, chaque argument doit être fourni sous la forme d’une chaîne distincte dans le tableau.","settings.path.description":"Chemin d’accès ou commande à utiliser par l’extension pour taper vérifier les fichiers Python avec Mypy. Accepte un tableau d’une ou plusieurs chaînes. Si vous passez une commande, chaque argument doit être fourni sous la forme d’une chaîne distincte dans le tableau. Si la valeur est `[\"mypy\"]`, elle utilise la version de Mypy disponible dans la variable d’environnement « PATH ». <br> Remarque : l’utilisation de cette option peut ralentir le contrôle de type. \n Exemples : \n- `[\"~/global_env/mypy\"]` \n- `[\"conda\", \"run\", \"-n\", \"lint_env\", \"python\", \"-m\", \"mypy\"]`","settings.preferDaemon.description":"Indique si le démon Mypy (« dmypy ») est prioritaire sur « mypy » pour le contrôle de type. <br> Remarque : si « mypy-type-checker.reportingScope » est défini sur « workspace », l’activation du démon Mypy offre une expérience de vérification de type plus rapide. Ce paramètre sera remplacé si « mypy-type-checker.path » est défini.","settings.reportingScope.description":"Contrôle l’étendue du rapport de problèmes de Mypy. Si la valeur est « fichier », Mypy limite son signalement des problèmes aux fichiers actuellement ouverts dans l’éditeur. S’il est défini sur « espace de travail », Mypy étend ses rapports de problèmes pour inclure tous les fichiers dans l’espace de travail.             ","settings.reportingScope.file.description":"Des problèmes sont signalés pour les fichiers ouverts dans l’éditeur uniquement.","settings.reportingScope.workspace.description":"Des problèmes sont signalés pour tous les fichiers de l’espace de travail.","settings.severity.description":"Mappage des types de messages de Mypy aux niveaux de gravité de diagnostic de VS Code, comme indiqué dans la fenêtre Problèmes. Vous pouvez également l’utiliser pour remplacer des codes d’erreur Mypy spécifiques. <br>For example: `{\"error\": \"Error\", \"note\": \"Information\", \"name-defined\": \"Warning\" }`","settings.showNotifications.always.description":"Afficher les notifications d’erreurs et d’avertissements.","settings.showNotifications.description":"Contrôle quand les notifications sont affichées par cette extension.","settings.showNotifications.off.description":"Ne jamais afficher de notification. Les erreurs ou les avertissements sont toujours disponibles dans les journaux.","settings.showNotifications.onError.description":"Afficher les notifications pour les erreurs.","settings.showNotifications.onWarning.description":"Afficher les notifications d’erreurs et d’avertissements."}
