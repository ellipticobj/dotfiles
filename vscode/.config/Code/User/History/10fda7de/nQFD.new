// frontend.rs
// handles drawing, etc

use ratatui::{
    layout::{Constraint, Direction, Layout, Rect}, style::{Color, Style}, text::Line, widgets::{Block, BorderType, Borders, Gauge, List, ListItem, Paragraph}
};

use anyhow::Result;
use crossterm::{
    event::{self, Event, KeyCode, KeyEventKind},
    execute,
    terminal::{disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen},
};
use ratatui::{
    backend::CrosstermBackend,
    widgets::ListState,
    Terminal,
};
use std::io;
use std::time::Duration;

use crate::{backend::{self, Backend}, models::{Playlist, RepeatMode}};
use crate::models::{CurrentColumn, SONGINFOPERCENT, Track, getsonginfocont};

pub fn runfrontend(mut backend: Backend) -> Result<()> {
    // --- setup terminal ---
    enable_raw_mode()?;
    let mut stdout = io::stdout();
    execute!(stdout, EnterAlternateScreen)?;
    let backendtui = CrosstermBackend::new(stdout);
    let mut terminal = Terminal::new(backendtui)?;

    // --- initialize ui state ---
    let mut running = true;
    let version = String::from("0.0.1");

    // --- main loop ---
    let mut counter: u8 = 0;
    while running {
        // Get the app state
        let appstate = backend::get::state(&backend);
        let elapsed = backend::get::elapsedduration()?;
        let total = backend::get::totalduration()?;
        
        // Initialize selections if needed (do this outside the terminal.draw closure)
        {
            let mut playlist_state = backend.selection.playliststate.clone();
            if playlist_state.selected().is_none() && !appstate.playlists.is_empty() {
                playlist_state.select(Some(0));
            }
            backend.selection.playliststate = playlist_state;
        }
        
        // Get the selected playlist index
        let selected_playlist_idx = backend.selection.playliststate.selected();
        
        // Get tracks from the selected playlist
        let tracks_to_display = if let Some(playlist_idx) = selected_playlist_idx {
            if playlist_idx < appstate.playlists.len() {
                &appstate.playlists[playlist_idx].tracks
            } else {
                &Vec::new()
            }
        } else {
            &Vec::new()
        };
        
        // Initialize track selection if needed
        {
            let mut track_state = backend.selection.trackstate.clone();
            if track_state.selected().is_none() && !tracks_to_display.is_empty() {
                track_state.select(Some(0));
            }
            backend.selection.trackstate = track_state;
        }
        
        // Initialize queue selection if needed
        {
            let mut queue_state = backend.selection.queuestate.clone();
            if queue_state.selected().is_none() && !appstate.player.queuestate.queue.is_empty() {
                queue_state.select(Some(0));
            }
            backend.selection.queuestate = queue_state;
        }
        
        // Clone the selection state for use in the terminal.draw closure
        let selected_column = backend.selection.selectedcolumn.clone();
        let mut playlist_state_clone = backend.selection.playliststate.clone();
        let mut track_state_clone = backend.selection.trackstate.clone();
        let mut queue_state_clone = backend.selection.queuestate.clone();
        
        terminal.draw(|frame| {
            let area = frame.area();
            let (playlists, tracks, queue, controls, songname, progressbar, credits) =
                construct(area, &appstate.player.isplaying);

            let playlistscont = getplaylistscont(&appstate.playlists, selected_column == CurrentColumn::Playlists);
            let trackscont = gettrackscont(tracks_to_display, selected_column == CurrentColumn::Tracks);
            let queuecont = getqueuecont(&appstate.player.queuestate.queue, selected_column == CurrentColumn::Queue);
            let controlscont = getcontrolscontent(&appstate.player.isplaying);
            let songinfocont = appstate.player.queuestate.queue.first()
                .map(|track| getsonginfocont(track, appstate.player.shufflestate.shuffle, appstate.player.repeatstate.repeatmode.clone()))
                .unwrap_or_else(|| getsonginfocont(&Track::default(), false, RepeatMode::None)); // Assuming Track implements Default
            let progressbarcont = getprogressbarcont(&elapsed, &total);
            let creditscont = getcreditscont(&version);
            
            frame.render_stateful_widget(playlistscont, playlists, &mut playlist_state_clone);
            frame.render_stateful_widget(trackscont, tracks, &mut track_state_clone);
            frame.render_stateful_widget(queuecont, queue, &mut queue_state_clone);
            frame.render_widget(controlscont, controls);
            frame.render_widget(songinfocont, songname);
            frame.render_widget(progressbarcont, progressbar);
            frame.render_widget(creditscont, credits);
        })?;
        
        // Update the selection state with the values from the clones
        backend.selection.playliststate = playlist_state_clone;
        backend.selection.trackstate = track_state_clone;
        backend.selection.queuestate = queue_state_clone;

        // Handle input
        if event::poll(Duration::from_millis(250))? {
            if let Event::Key(key) = event::read()? {
                if key.kind == KeyEventKind::Press {
                    handleinput(&mut backend, &mut running, key.code)?;
                }
            }
        }

        // handle periodic updates (e.g., track progress)
        counter = (counter + 1) % 4;
        if counter == 0 {
            // TODO: update currenttime or check track end via backend
        }
    }

    // --- cleanup ---
    let _ = backend.shutdown();
    execute!(io::stdout(), LeaveAlternateScreen)?;
    disable_raw_mode()?;

    Ok(())
}

fn handleinput(
    backend: &mut Backend,
    running: &mut bool,
    key: KeyCode,
) -> Result<()> {
    // Handle input based on app state
    match key {
        KeyCode::Char('q') => *running = false,
        KeyCode::Char(' ') => backend::set::playpause(backend)?, // toggle play/pause
        KeyCode::Char('>') => backend::set::next(backend)?,
        KeyCode::Char('<') => {
            // TODO: restart song when < 10 secs
            backend::set::prev(backend)?
        },
        KeyCode::Char('s') => backend::set::toggleshuffle(backend),
        KeyCode::Char('r') => backend::set::cyclerepeat(backend),
        KeyCode::Up => backend::set::prevrow(backend),
        KeyCode::Down => backend::set::nextrow(backend),
        KeyCode::Left => backend::set::prevcolumn(backend),
        KeyCode::Right => backend::set::nextcolumn(backend),
        KeyCode::Enter => { /* ... play selected track or playlist ... */ }
        _ => {}
    }
    Ok(())
}


/// main constructor
/// 
/// # arguments
/// * 'area' - the area to split up into individual areas
/// 
/// # returns
/// * a tuple of six rects:
///     * playlists
///     * tracks
///     * queue
///     * controls
///     * songinfo
///     * progressbar
pub fn construct(area: Rect, isplaying: &bool) -> (Rect, Rect, Rect, Rect, Rect, Rect, Rect) {
    let verticalchunks = Layout::default()
            .direction(Direction::Vertical)
            .constraints([
                Constraint::Percentage(100),// tracks views
                Constraint::Min(3),         // controls/info
                Constraint::Length(1)       // credits
            ])
            .split(area);

    let toplayout = verticalchunks[0];
    let bottomlayout = verticalchunks[1];

    let topchunks = Layout::default()
            .direction(Direction::Horizontal)
            .constraints([
                Constraint::Fill(2),            // playlists
                Constraint::Fill(5),            // tracks
                Constraint::Fill(2)             // queue
            ])
            .split(toplayout);

    let bottomchunks = Layout::default()
            .direction(Direction::Horizontal)
            .constraints(
                if isplaying.to_owned() {[
                    Constraint::Length(21),                     // controls
                    Constraint::Percentage(SONGINFOPERCENT),    // song name
                    Constraint::Min(20)                         // progress bar
                ]} else {[
                    Constraint::Length(20),                     // controls
                    Constraint::Percentage(SONGINFOPERCENT),    // song name
                    Constraint::Min(20)                         // progress bar
                ]}
            )
            .split(bottomlayout);

    let playlists = topchunks[0];
    let tracks = topchunks[1];
    let queue = topchunks[2];

    let controls = bottomchunks[0];
    let songname = bottomchunks[1];
    let progressbar = bottomchunks[2];

    let credits = verticalchunks[2];

    (playlists, tracks, queue, controls, songname, progressbar, credits)
}

fn getcontrolscontent(isplaying: &bool) -> Paragraph {
    let text = if isplaying.to_owned() {
        String::from("[<<] [play] [>>]")
    } else {
        String::from("[<<] [pause] [>>]")
    };

    Paragraph::new(text)
        .block(
            Block::new()
                .title(" controls ")
                .borders(Borders::ALL)
                .border_type(BorderType::Rounded),
        )
        .style(Style::default().fg(Color::Magenta))
        .alignment(ratatui::layout::Alignment::Center)
}

fn getplaylistscont(playlists: &Vec<Playlist>, infocus: bool) -> List {
    // gets the list of playlists
    let playlistitems: Vec<ListItem> = playlists
        .iter()
        .map(|p| ListItem::new(format!(" {}", p.name.as_str())))
        .collect();

    let playlistslist = List::new(playlistitems)
        .block(
            Block::default()
                .borders(Borders::ALL)
                .border_style(
                    if infocus {
                        Style::default().fg(Color::Magenta)
                    } else {
                        Style::default()
                    }
                )
                .border_type(
                    if infocus {
                        BorderType::Thick
                    } else {
                        BorderType::Rounded
                    }
                )
                .title(" playlists ")
        )
        .highlight_style(
            if infocus {
                Style::default().bg(Color::Magenta).fg(Color::White)
            } else {
                Style::default().bg(Color::LightMagenta).fg(Color::White)
            }
        )
        .highlight_symbol("> ");

    playlistslist
}

fn gettrackscont(tracks: &Vec<Track>, infocus: bool) -> List {
    // gets the list of tracks
    let trackitems: Vec<ListItem> = tracks
        .iter()
        .map(|t| ListItem::new(format!(" {} - {}", t.title.as_str(), t.artist.as_str())))
        .collect();

    let trackslist = List::new(trackitems)
        .block(
            Block::default()
                .borders(Borders::ALL)
                .border_style(
                    if infocus {
                        Style::default().fg(Color::Magenta)
                    } else {
                        Style::default()
                    }
                )
                .border_type(
                    if infocus {
                        BorderType::Thick
                    } else {
                        BorderType::Rounded
                    }
                )
                .title(" tracks ")
        )
        .highlight_style(
            if infocus {
                Style::default().bg(Color::Magenta).fg(Color::White)
            } else {
                Style::default().bg(Color::LightMagenta).fg(Color::White)
            }
        )
        .highlight_symbol("> ");

    trackslist
}

fn getqueuecont(tracks: &Vec<Track>, infocus: bool) -> List {
    // gets the list of tracks
    let trackitems: Vec<ListItem> = tracks
        .iter()
        .map(|t| ListItem::new(String::from(t.title.as_str())))
        .collect();

    let trackslist = List::new(trackitems)
        .block(
            Block::default()
                .borders(Borders::ALL)
                .border_style(
                    if infocus {
                        Style::default().fg(Color::Magenta)
                    } else {
                        Style::default()
                    }
                )
                .border_type(
                    if infocus {
                        BorderType::Thick
                    } else {
                        BorderType::Rounded
                    }
                )
                .title(" queue ")
        )
        .highlight_style(
            if infocus {
                Style::default().bg(Color::Magenta).fg(Color::White)
            } else {
                Style::default().bg(Color::LightMagenta).fg(Color::White)
            }
        )
        .highlight_symbol("> ");

    trackslist
}


// These functions have been moved to models.rs

fn getprogressbarcont(currenttime: &u32, totaltime: &u32) -> Gauge<'static> {
    let current = currenttime.to_owned();
    let total = totaltime.to_owned();
    // gets the progressbar 
    let currentprogress: String = getprettyduration(current);
    let totalprogress: String = getprettyduration(total);
    let currentprogressratio;
    if total == 0 {
        currentprogressratio = 0f64;
    } else {
        currentprogressratio = current as f64/total as f64;
    }

    Gauge::default()
        .block(
            Block::default().title(format!(" {}/{} ", currentprogress, totalprogress))
                .borders(Borders::ALL)
                .border_type(BorderType::Rounded)
        )
        .style(Style::default().fg(Color::Magenta))
        .gauge_style(Style::default().fg(Color::LightMagenta))
        .label("")
        .ratio(currentprogressratio)
}

fn getprettyduration(secs: u32) -> String {
    let minutes = secs / 60;
    let seconds = secs % 60;
    format!("{}:{:02}", minutes, seconds)
}

fn getcreditscont(version: &str) -> Block {
    // gets the credits
    Block::new()
        .title_top(format!("mpvlayer ── v{} ", version))
        .title_top(Line::from(" https://github.com/ellipticobj/mpvlayer").right_aligned())
        .border_type(BorderType::Rounded)
        .borders(Borders::TOP)
}
