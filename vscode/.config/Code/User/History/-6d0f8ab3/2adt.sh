#!/bin/bash

#------------------------------------------------------------------------------
# config variables
#------------------------------------------------------------------------------

INSTALLPKGS=false
INSTALLFLATPAKS=false
INSTALLFONTS=false
EXPORTPACKAGES=false
IMPORTPACKAGES=false
IMPORTFILE=""

# export file paths
RPMOUTPUTFILE="./fedora-packages-rpm.txt"
CONFOUTPUTFILE="./packages-exported.conf"

# batch sizes for package installation
BATCHSIZE=30
SMALLBATCHSIZE=20

# list of flatpaks to install
FLATPAKS=(
  "app.zen_browser.zen"
)

# fonts configuration
# base directory for all fonts
FONTS_BASE_DIR="$HOME/.local/share/fonts"

# declare associative array for fonts (name -> url)
declare -A FONTS=(
  ["CartographCF"]="https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip"
)

#------------------------------------------------------------------------------
# functions
#------------------------------------------------------------------------------

printlogo() {
    cat << "EOF"
    ______
   / ____/_  ___________  ____ _________
  / /_  / / / / ___/ __ \/ __ `/ ___/ _ \ fedora system crafting tool
 / __/ / /_/ / /  / / / / /_/ / /__/  __/ original by: typecraft
/_/    \__,_/_/  /_/ /_/\__,_/\___/\___/  fork by: ellipticobj

EOF
}

showhelp() {
  echo "usage: $0 [OPTION]"
  echo "options:"
  echo "  -h, --help                 display this help message"
  echo "  -a, --all                  install everything (default)"
  echo "  -p, --packages             install packages from packages.conf"
  echo "  -f, --flatpaks             install flatpaks"
  echo "  -t, --fonts                install fonts"
  echo "  -d, --download [FILENAME]  install packages from a file"
  echo "  -e, --export               export currently installed packages to files"
  echo "                             creates $RPMOUTPUTFILE and $CONFOUTPUTFILE"
  echo "  -c, --current              export and install currently installed packages"
  echo
}

# install everything if no args
if [ $# -eq 0 ]; then
  INSTALLPKGS=true
  INSTALLFLATPAKS=true
  INSTALLFONTS=true
fi

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      showhelp
      exit 0
      ;;
    -a|--all)
      INSTALLPKGS=true
      INSTALLFLATPAKS=true
      INSTALLFONTS=true
      shift
      ;;
    -p|--packages)
      INSTALLPKGS=true
      shift
      ;;
    -f|--flatpaks)
      INSTALLFLATPAKS=true
      shift
      ;;
    -t|--fonts)
      INSTALLFONTS=true
      shift
      ;;
    -e|--export)
      EXPORTPACKAGES=true
      shift
      ;;
    -d|--download)
      IMPORTPACKAGES=true
      if [[ -n "$2" && ! "$2" =~ ^- ]]; then
        IMPORTFILE="$2"
        shift
      else
        IMPORTFILE="fedora-packages-rpm.txt"
      fi
      shift
      ;;
    -c|--current)
      EXPORTPACKAGES=true
      IMPORTPACKAGES=true
      shift
      ;;
    *)
      echo "unknown option: $1"
      showhelp
      exit 1
      ;;
  esac
done

# clear screen and show logo
printlogo

# exit on any error
set -e

# export packages if requested
if [[ "$EXPORTPACKAGES" == true ]]; then
  echo "exporting currently installed packages..."
  echo "exporting installed packages to $RPMOUTPUTFILE and $CONFOUTPUTFILE..."

  # export to rpm text format
  echo "# fedora packages installed on $(date)" > "$RPMOUTPUTFILE"
  echo "# generated by furnace" >> "$RPMOUTPUTFILE"
  echo "# https://github.com/ellipticobj/furnace" >> "$RPMOUTPUTFILE"
  echo "" >> "$RPMOUTPUTFILE"
  echo "# user-installed packages" >> "$RPMOUTPUTFILE"
  rpm -qa --qf "%{NAME}\n" | sort >> "$RPMOUTPUTFILE"

  # export to packages.conf format
  echo "# Fedora packages installed on $(date)" > "$CONFOUTPUTFILE"
  echo "# Generated by Furnace" >> "$CONFOUTPUTFILE"
  echo "" >> "$CONFOUTPUTFILE"
  echo "# All packages to install" >> "$CONFOUTPUTFILE"
  echo "PACKAGES=(" >> "$CONFOUTPUTFILE"

  # get the list of installed packages
  rpm -qa --qf "%{NAME}\n" | sort | while read -r package; do
    echo "  $package" >> "$CONFOUTPUTFILE"
  done

  echo ")" >> "$CONFOUTPUTFILE"
  echo "" >> "$CONFOUTPUTFILE"
  echo "# services" >> "$CONFOUTPUTFILE"
  echo "SERVICES=(" >> "$CONFOUTPUTFILE"
  echo "  NetworkManager.service" >> "$CONFOUTPUTFILE"
  echo "  bluetooth.service" >> "$CONFOUTPUTFILE"
  echo ")" >> "$CONFOUTPUTFILE"

  echo "package list exported successfully to $RPMOUTPUTFILE and $CONFOUTPUTFILE"
fi

# import packages if requested
if [[ "$IMPORTPACKAGES" == true ]]; then
  if [[ -z "$IMPORTFILE" ]]; then
    IMPORTFILE="fedora-packages-rpm.txt"
  fi

  if [ ! -f "$IMPORTFILE" ]; then
    echo "Error: Package list file not found: $IMPORTFILE"
    exit 1
  fi

  echo "installing packages from $IMPORTFILE..."

  # read packages from file, skipping comments and empty lines
  PACKAGES=()
  while IFS= read -r line || [ -n "$line" ]; do
    # skip comments and empty lines
    if [[ ! "$line" =~ ^#.*$ ]] && [[ -n "$line" ]]; then
      # check if the package is already installed
      if ! rpm -q "$line" &> /dev/null; then
        PACKAGES+=("$line")
      fi
    fi
  done < "$IMPORTFILE"

  # install packages in batches to avoid command line length issues
  if [ ${#PACKAGES[@]} -ne 0 ]; then
    echo "found ${#PACKAGES[@]} packages to install"

    # install in batches
    TOTAL_PACKAGES=${#PACKAGES[@]}
    BATCHES=$(( (TOTAL_PACKAGES + BATCHSIZE - 1) / BATCHSIZE ))

    for ((i=0; i<BATCHES; i++)); do
      START=$((i * BATCHSIZE))
      END=$(( (i+1) * BATCHSIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCHSIZE ))
      BATCH=("${PACKAGES[@]:START:END-START}")

      echo "Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)..."
      sudo dnf install -y "${BATCH[@]}"
    done

    echo "all packages have been installed"
  else
    echo "no new packages found to install in $IMPORTFILE"
  fi
fi

# install packages from packages.conf
if [[ "$INSTALLPKGS" == true ]]; then
  # source the package list
  if [ ! -f "packages.conf" ]; then
    echo "error: packages.conf not found"
    exit 1
  fi

  source packages.conf

  echo "starting system setup..."

  # update the system first
  echo "updating system..."
  sudo dnf upgrade -y

  # install packages in batches
  installpkgs() {
    local packages=("$@")

    if [ ${#packages[@]} -eq 0 ]; then
      return
    fi

    echo "installing packages..."

    # install in batches to avoid command line length issues
    local totalpackages=${#packages[@]}
    local batches=$(( (totalpackages + SMALLBATCHSIZE - 1) / SMALLBATCHSIZE ))

    for ((i=0; i<batches; i++)); do
      local start=$((i * SMALLBATCHSIZE))
      local end=$(( (i+1) * SMALLBATCHSIZE > totalpackages ? totalpackages : (i+1) * SMALLBATCHSIZE ))
      local batch=("${packages[@]:start:end-start}")

      echo "installing batch $((i+1))/$batches ($(( end - start )) packages)..."
      sudo dnf install -y "${batch[@]}"
    done
  }

  # install all packages
  installpkgs "${PACKAGES[@]}"

  # enable services
  echo "configuring services..."
  for service in "${SERVICES[@]}"; do
    if ! systemctl is-enabled "$service" &> /dev/null; then
      echo "enabling $service..."
      sudo systemctl enable "$service"
    else
      echo "$service is already enabled"
    fi
  done
fi

# install flatpaks
if [[ "$INSTALLFLATPAKS" == true ]]; then
  echo "installing flatpaks..."

  for pak in "${FLATPAKS[@]}"; do
    if ! flatpak list | grep -i "$pak" &> /dev/null; then
      echo "installing flatpak: $pak"
      flatpak install --noninteractive "$pak"
    else
      echo "flatpak already installed: $pak"
    fi
  done
fi

# Install fonts
if [[ "$INSTALLFONTS" == true ]]; then
  echo "installing fonts..."

  # Create temporary directory for downloads
  TEMP_DIR=$(mktemp -d)

  # Process each font in the associative array
  for font_name in "${!FONTS[@]}"; do
    font_url="${FONTS[$font_name]}"
    font_dir="$FONTS_BASE_DIR/$font_name"

    echo "Installing $font_name font..."

    # Create font directory
    mkdir -p "$font_dir"

    # Download font
    if wget -q "$font_url" -O "$TEMP_DIR/$font_name.zip"; then
      # Extract font
      unzip -o -q "$TEMP_DIR/$font_name.zip" -d "$font_dir"
      echo "$font_name installed successfully"
    else
      echo "Failed to download $font_name :("
    fi
  done

  # Clean up temporary directory
  rm -rf "$TEMP_DIR"

  # Update font cache
  if command -v fc-cache &> /dev/null; then
    echo "Updating font cache..."
    fc-cache -f
  fi
fi

echo "complete!"
