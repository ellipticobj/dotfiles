{"path":{"rootPath":"/home/luna/repos/mysteriousellipsis.github.io","relPath":"main.js"},"originalCode":"document.addEventListener('DOMContentLoaded', function() {\n    // --- page transition ---\n    const FADEDURATION = 400;\n    document.body.style.opacity = '1';\n\n    const navLinks = document.querySelectorAll('a[data-page-nav]'); \n\n    navLinks.forEach(link => {\n        link.addEventListener('click', function(event) {\n            const destination = this.href;\n\n            if (destination && destination !== window.location.href && !destination.startsWith('#')) {\n                event.preventDefault();\n                document.body.classList.add('fade-out');\n\n                setTimeout(() => {\n                    window.location.href = destination;\n                }, FADEDURATION);\n            }\n        });\n    });\n\n    // --- theme toggle ---\n    const themeToggle = document.querySelector('.theme-toggle');\n    const body = document.body;\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark') {\n        body.classList.remove('theme-light');\n        body.classList.add('theme-dark');\n    } else {\n        body.classList.add('theme-light');\n    }\n    themeToggle.addEventListener('click', function() {\n        body.classList.toggle('theme-light');\n        body.classList.toggle('theme-dark');\n        localStorage.setItem('theme', body.classList.contains('theme-dark') ? 'dark' : 'light');\n    });\n\n    // --- intersection observer for main page sections ---\n    const sections = document.querySelectorAll('section');\n    if (sections.length > 0) {\n        const observerOptions = {\n            root: null,\n            rootMargin: '0px',\n            threshold: 0.15\n        };\n\n        const sectionObserver = new IntersectionObserver((entries, observer) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    entry.target.classList.add('visible');\n                    const childrenToFade = entry.target.querySelectorAll('.fade-in');\n                    childrenToFade.forEach((child, index) => {\n                        setTimeout(() => {\n                            child.classList.add('visible');\n                        }, index * 150); \n                    });\n                    observer.unobserve(entry.target);\n                }\n            });\n        }, observerOptions);\n\n        sections.forEach(section => {\n            sectionObserver.observe(section);\n        });\n    }\n\n    // // --- animations for subpages ---\n    // const projectsContainerSubpage = document.querySelector('.page-content .projects-container');\n    // const achievementsContainerSubpage = document.querySelector('.page-content .achievements-container');\n\n    // if (projectsContainerSubpage || achievementsContainerSubpage) {\n    //     const container = projectsContainerSubpage || achievementsContainerSubpage;\n    //     const elementsToFade = container.querySelectorAll(':scope > .fade-in');\n    //     setTimeout(() => {\n    //         elementsToFade.forEach((element, index) => {\n    //             setTimeout(() => {\n    //                 element.classList.add('visible');\n    //             }, index * 150);\n    //         });\n    //     }, 100);\n    // }\n\n        // --- animations for subpages ---\n        console.log('[Debug] Checking for subpage containers...'); // Log: Check start\n        const projectsContainerSubpage = document.querySelector('.page-content .projects-container');\n        const achievementsContainerSubpage = document.querySelector('.page-content .achievements-container');\n    \n        if (projectsContainerSubpage || achievementsContainerSubpage) {\n            console.log('[Debug] Subpage container found!'); // Log: Block entered\n            const container = projectsContainerSubpage || achievementsContainerSubpage;\n            console.log('[Debug] Container element:', container); // Log: Container element\n    \n            // Select only the direct children cards within that container that need fading in\n            const elementsToFade = container.querySelectorAll(':scope > .fade-in');\n            console.log(`[Debug] Found ${elementsToFade.length} elements to fade in:`, elementsToFade); // Log: Selected elements count + list\n    \n            if (elementsToFade.length > 0) {\n                // Ensure body fade-in has likely completed before starting card animations\n                setTimeout(() => {\n                    console.log('[Debug] Starting stagger animation for subpage cards...'); // Log: Stagger start\n                    elementsToFade.forEach((element, index) => {\n                        // Double check element exists before setting timeout\n                        if (element) {\n                            setTimeout(() => {\n                                console.log(`[Debug] Adding .visible to element ${index}:`, element); // Log: Adding class\n                                element.classList.add('visible');\n                            }, index * 150); // Stagger delay\n                        } else {\n                             console.error(`[Debug] Element at index ${index} is null or undefined.`); // Log: Error if element missing\n                        }\n                    });\n                }, 150); // Initial delay slightly increased - adjust if needed (try 100, 200)\n            } else {\n                console.log('[Debug] No elements with .fade-in found as direct children of the container.'); // Log: No elements found\n            }\n        } else {\n             console.log('[Debug] Not detected as a subpage with project/achievement container.'); // Log: Not a subpage\n        }\n    \n\n    // --- homepage hero animations ---\n    const heroContent = document.querySelector('.hero-content');\n    if (heroContent) {\n        heroContent.classList.add('fade-in');\n        const linksContainer = document.querySelector('.links-container');\n        if (linksContainer) linksContainer.classList.add('fade-in');\n        const scrollIndicator = document.querySelector('.scroll-indicator');\n        if (scrollIndicator) scrollIndicator.classList.add('fade-in');\n\n        setTimeout(() => {\n            if (heroContent) heroContent.classList.add('visible');\n            setTimeout(() => {\n                if (linksContainer) linksContainer.classList.add('visible');\n            }, 150);\n            setTimeout(() => {\n                if (scrollIndicator) scrollIndicator.classList.add('visible');\n            }, 300);\n        }, 100);\n    }\n\n\n    // --- scroll arrow behavior ---\n    const scrollArrow = document.getElementById('scrollArrow');\n    if (scrollArrow) {\n        const heroContainer = document.querySelector('.hero-container');\n        const heroScrollIndicator = document.getElementById('heroScrollIndicator');\n\n        function handleScroll() {\n            if (!heroContainer) return;\n            const heroBottom = heroContainer.offsetTop + heroContainer.offsetHeight;\n            const scrollArrowVisible = scrollArrow.classList.contains('visible');\n\n            if (window.scrollY > heroBottom / 2) {\n                if (!scrollArrowVisible) scrollArrow.classList.add('visible');\n\n                scrollArrow.setAttribute('data-target', 'top');\n            } else {\n                if (scrollArrowVisible) scrollArrow.classList.remove('visible');\n            }\n        }\n        window.addEventListener('scroll', handleScroll);\n        scrollArrow.addEventListener('click', function() {\n            const target = this.getAttribute('data-target');\n            if (target === 'top') {\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            } else {\n                const firstSection = document.querySelector('section');\n                if (firstSection) firstSection.scrollIntoView({ behavior: 'smooth' });\n            }\n        });\n        if (heroScrollIndicator) {\n            heroScrollIndicator.addEventListener('click', function() {\n                const firstSection = document.querySelector('section');\n                if (firstSection) firstSection.scrollIntoView({ behavior: 'smooth' });\n            });\n        }\n        handleScroll();\n    }\n\n    // --- smooth scrolling for nave links ---\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n        anchor.addEventListener('click', function(e) {\n            const targetId = this.getAttribute('href');\n            if (targetId.startsWith('#') && targetId.length > 1) {\n                e.preventDefault();\n                const targetElement = document.querySelector(targetId);\n                if (targetElement) {\n                    const headerOffset = 60; \n                    const elementPosition = targetElement.getBoundingClientRect().top;\n                    const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n                    window.scrollTo({ top: offsetPosition, behavior: 'smooth' });\n                }\n            } else if (targetId === '#') {\n                e.preventDefault();\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n        });\n    });\n});\n","modifiedCode":"document.addEventListener('DOMContentLoaded', function() {\n    // --- page transition ---\n    const FADEDURATION = 400;\n    document.body.style.opacity = '1';\n\n    const navLinks = document.querySelectorAll('a[data-page-nav]'); \n\n    navLinks.forEach(link => {\n        link.addEventListener('click', function(event) {\n            const destination = this.href;\n\n            if (destination && destination !== window.location.href && !destination.startsWith('#')) {\n                event.preventDefault();\n                document.body.classList.add('fade-out');\n\n                setTimeout(() => {\n                    window.location.href = destination;\n                }, FADEDURATION);\n            }\n        });\n    });\n\n    // --- theme toggle ---\n    const themeToggle = document.querySelector('.theme-toggle');\n    const body = document.body;\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark') {\n        body.classList.remove('theme-light');\n        body.classList.add('theme-dark');\n    } else {\n        body.classList.add('theme-light');\n    }\n    themeToggle.addEventListener('click', function() {\n        body.classList.toggle('theme-light');\n        body.classList.toggle('theme-dark');\n        localStorage.setItem('theme', body.classList.contains('theme-dark') ? 'dark' : 'light');\n    });\n\n    // --- intersection observer for main page sections ---\n    const sections = document.querySelectorAll('section');\n    if (sections.length > 0) {\n        const observerOptions = {\n            root: null,\n            rootMargin: '0px',\n            threshold: 0.15\n        };\n\n        const sectionObserver = new IntersectionObserver((entries, observer) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    entry.target.classList.add('visible');\n                    const childrenToFade = entry.target.querySelectorAll('.fade-in');\n                    childrenToFade.forEach((child, index) => {\n                        setTimeout(() => {\n                            child.classList.add('visible');\n                        }, index * 150); \n                    });\n                    observer.unobserve(entry.target);\n                }\n            });\n        }, observerOptions);\n\n        sections.forEach(section => {\n            sectionObserver.observe(section);\n        });\n    }\n\n    // // --- animations for subpages ---\n    // const projectsContainerSubpage = document.querySelector('.page-content .projects-container');\n    // const achievementsContainerSubpage = document.querySelector('.page-content .achievements-container');\n\n    // if (projectsContainerSubpage || achievementsContainerSubpage) {\n    //     const container = projectsContainerSubpage || achievementsContainerSubpage;\n    //     const elementsToFade = container.querySelectorAll(':scope > .fade-in');\n    //     setTimeout(() => {\n    //         elementsToFade.forEach((element, index) => {\n    //             setTimeout(() => {\n    //                 element.classList.add('visible');\n    //             }, index * 150);\n    //         });\n    //     }, 100);\n    // }\n\n        // --- animations for subpages ---\n        console.log('[Debug] Checking for subpage containers...'); // Log: Check start\n        const projectsContainerSubpage = document.querySelector('.page-content .projects-container');\n        const achievementsContainerSubpage = document.querySelector('.page-content .achievements-container');\n    \n        if (projectsContainerSubpage || achievementsContainerSubpage) {\n            console.log('[Debug] Subpage container found!'); // Log: Block entered\n            const container = projectsContainerSubpage || achievementsContainerSubpage;\n            console.log('[Debug] Container element:', container); // Log: Container element\n    \n            // Select only the direct children cards within that container that need fading in\n            const elementsToFade = container.querySelectorAll(':scope > .fade-in');\n            console.log(`[Debug] Found ${elementsToFade.length} elements to fade in:`, elementsToFade); // Log: Selected elements count + list\n    \n            if (elementsToFade.length > 0) {\n                // Ensure body fade-in has likely completed before starting card animations\n                setTimeout(() => {\n                    console.log('[Debug] Starting stagger animation for subpage cards...'); // Log: Stagger start\n                    elementsToFade.forEach((element, index) => {\n                        // Double check element exists before setting timeout\n                        if (element) {\n                            setTimeout(() => {\n                                console.log(`[Debug] Adding .visible to element ${index}:`, element); // Log: Adding class\n                                element.classList.add('visible');\n                            }, index * 150); // Stagger delay\n                        } else {\n                             console.error(`[Debug] Element at index ${index} is null or undefined.`); // Log: Error if element missing\n                        }\n                    });\n                }, 150); // Initial delay slightly increased - adjust if needed (try 100, 200)\n            } else {\n                console.log('[Debug] No elements with .fade-in found as direct children of the container.'); // Log: No elements found\n            }\n        } else {\n             console.log('[Debug] Not detected as a subpage with project/achievement container.'); // Log: Not a subpage\n        }\n    \n\n    // --- homepage hero animations ---\n    const heroContent = document.querySelector('.hero-content');\n    if (heroContent) {\n        heroContent.classList.add('fade-in');\n        const linksContainer = document.querySelector('.links-container');\n        if (linksContainer) linksContainer.classList.add('fade-in');\n        const scrollIndicator = document.querySelector('.scroll-indicator');\n        if (scrollIndicator) scrollIndicator.classList.add('fade-in');\n\n        setTimeout(() => {\n            if (heroContent) heroContent.classList.add('visible');\n            setTimeout(() => {\n                if (linksContainer) linksContainer.classList.add('visible');\n            }, 150);\n            setTimeout(() => {\n                if (scrollIndicator) scrollIndicator.classList.add('visible');\n            }, 300);\n        }, 100);\n    }\n\n\n    // --- scroll arrow behavior ---\n    const scrollArrow = document.getElementById('scrollArrow');\n    if (scrollArrow) {\n        const heroContainer = document.querySelector('.hero-container');\n        const heroScrollIndicator = document.getElementById('heroScrollIndicator');\n\n        function handleScroll() {\n            if (!heroContainer) return;\n            const heroBottom = heroContainer.offsetTop + heroContainer.offsetHeight;\n            const scrollArrowVisible = scrollArrow.classList.contains('visible');\n\n            if (window.scrollY > heroBottom / 2) {\n                if (!scrollArrowVisible) scrollArrow.classList.add('visible');\n\n                scrollArrow.setAttribute('data-target', 'top');\n            } else {\n                if (scrollArrowVisible) scrollArrow.classList.remove('visible');\n            }\n        }\n        window.addEventListener('scroll', handleScroll);\n        scrollArrow.addEventListener('click', function() {\n            const target = this.getAttribute('data-target');\n            if (target === 'top') {\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            } else {\n                const firstSection = document.querySelector('section');\n                if (firstSection) firstSection.scrollIntoView({ behavior: 'smooth' });\n            }\n        });\n        if (heroScrollIndicator) {\n            heroScrollIndicator.addEventListener('click', function() {\n                const firstSection = document.querySelector('section');\n                if (firstSection) firstSection.scrollIntoView({ behavior: 'smooth' });\n            });\n        }\n        handleScroll();\n    }\n\n    // --- smooth scrolling for nave links ---\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n        anchor.addEventListener('click', function(e) {\n            const targetId = this.getAttribute('href');\n            if (targetId.startsWith('#') && targetId.length > 1) {\n                e.preventDefault();\n                const targetElement = document.querySelector(targetId);\n                if (targetElement) {\n                    const headerOffset = 60; \n                    const elementPosition = targetElement.getBoundingClientRect().top;\n                    const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n                    window.scrollTo({ top: offsetPosition, behavior: 'smooth' });\n                }\n            } else if (targetId === '#') {\n                e.preventDefault();\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n        });\n    });\n});\n"}