{"path":{"rootPath":"/home/luna/repos/mpvlayer","relPath":"src/backend/mod.rs"},"originalCode":"// mod.rs\n// backend\n\npub mod get;\npub mod set;\n\nuse crate::models::*;\nuse anyhow::Result;\nuse std::process::Child;\n\npub struct Backend {\n    pub(crate) state: AppState,\n    pub(crate) selection: SelectionState,\n    pub(crate) mpvprocess: Option<Child>,\n}\n\nimpl Backend {\n    pub fn new() -> Self {\n        // initialize the backend\n        let backend = Backend {\n            state: AppState {\n                playlists: Vec::new(),\n                player: PlayerState {\n                    isplaying: false,\n                    currenttime: 0,\n                    queuestate: QueueState {\n                        queue: Vec::new(),\n                        history: Vec::new(),\n                    },\n                    repeatstate: RepeatState {\n                        repeatmode: RepeatMode::None,\n                        originalqueue: vec![]\n                    },\n                    shufflestate: ShuffleState {\n                        shuffle: false,\n                        originalqueue: vec![]\n                    }\n                },\n                popup: PopupState {\n                    onscreen: false,\n                    title: String::new(),\n                    header: String::new(),\n                    message: Vec::new(),\n                    dangerous: false\n                }\n            },\n            selection: SelectionState {\n                selectedcolumn: CurrentColumn::Playlists, // playlists column selected on startup\n                selectedplaylist: None,\n                selectedtrack: None,\n            },\n            mpvprocess: None,\n        };\n\n        backend\n    }\n\n    pub fn shutdown(&mut self) -> Result<()> {\n        if let Some(mut process) = self.mpvprocess.take() {\n            let _ = process.kill();\n        }\n\n        Ok(())\n    }\n}\n","modifiedCode":"// mod.rs\n// backend\n\npub mod get;\npub mod set;\n\nuse crate::models::*;\nuse anyhow::Result;\nuse std::process::Child;\n\npub struct Backend {\n    pub(crate) state: AppState,\n    pub(crate) selection: SelectionState,\n    pub(crate) mpvprocess: Option<Child>,\n}\n\nimpl Backend {\n    pub fn new() -> Self {\n        // initialize the backend\n        let backend = Backend {\n            state: AppState {\n                playlists: Vec::new(),\n                player: PlayerState {\n                    isplaying: false,\n                    currenttime: 0,\n                    queuestate: QueueState {\n                        queue: Vec::new(),\n                        history: Vec::new(),\n                    },\n                    repeatstate: RepeatState {\n                        repeatmode: RepeatMode::None,\n                        originalqueue: vec![]\n                    },\n                    shufflestate: ShuffleState {\n                        shuffle: false,\n                        originalqueue: vec![]\n                    }\n                },\n                popup: PopupState {\n                    onscreen: false,\n                    title: String::new(),\n                    header: String::new(),\n                    message: Vec::new(),\n                    dangerous: false\n                }\n            },\n            selection: SelectionState {\n                selectedcolumn: CurrentColumn::Playlists, // playlists column selected on startup\n                playliststate: ratatui::widgets::ListState::default(),\n                trackstate: ratatui::widgets::ListState::default(),\n                queuestate: ratatui::widgets::ListState::default(),\n            },\n            mpvprocess: None,\n        };\n\n        backend\n    }\n\n    pub fn shutdown(&mut self) -> Result<()> {\n        if let Some(mut process) = self.mpvprocess.take() {\n            let _ = process.kill();\n        }\n\n        Ok(())\n    }\n}\n"}