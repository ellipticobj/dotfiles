{"path":{"rootPath":"/home/luna/repos/mpvlayer","relPath":"src/models.rs"},"originalCode":"// models.rs\n// shared data structures for the music player app.\n\npub const MAXQUEUELENGTH: usize = 100;\npub const MPVSOCKET: &str = \"/tmp/mpvsocket\";\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum CurrentColumn {\n    Playlists,\n    Tracks,\n    Queue,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct Track {\n    pub title: String,\n    pub artist: String,\n    pub url: String,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct Playlist {\n    pub name: String,\n    pub tracks: Vec<Track>,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum RepeatMode {\n    None,\n    One,\n    All,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct ShuffleState {\n    pub shuffle: bool,\n    pub originalqueue: Vec<Track>\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct RepeatState {\n    pub repeatmode: RepeatMode,\n    pub originalqueue: Vec<Track>\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct QueueState {\n    pub queue: Vec<Track>,\n    pub history: Vec<Track>\n}\n\n#[derive(Clone, Debug)]\npub struct PlayerState {\n    pub isplaying: bool,\n    pub currenttime: u32, // in seconds\n    pub queuestate: QueueState, \n    pub repeatstate: RepeatState,\n    pub shufflestate: ShuffleState,\n}\n\n#[derive(Clone, Debug)]\npub struct SelectionState {\n    pub selectedcolumn: CurrentColumn,\n    pub selectedplaylist: Option<usize>, \n    pub selectedtrack: Option<usize>\n}\n\n#[derive(Clone, Debug)]\npub struct PopupState {\n    pub onscreen: bool,\n    pub title: String,\n    pub header: String,\n    pub message: Vec<String>,\n    pub dangerous: bool,\n}\n\n#[derive(Clone, Debug)]\npub struct AppState {\n    pub playlists: Vec<Playlist>,\n    pub player: PlayerState,\n    pub popup: PopupState,\n}\n\n","modifiedCode":"// models.rs\n// shared data structures for the music player app.\n\npub const MAXQUEUELENGTH: usize = 100;\npub const MPVSOCKET: &str = \"/tmp/mpvsocket\";\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum CurrentColumn {\n    Playlists,\n    Tracks,\n    Queue,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct Track {\n    pub title: String,\n    pub artist: String,\n    pub url: String,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct Playlist {\n    pub name: String,\n    pub tracks: Vec<Track>,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum RepeatMode {\n    None,\n    One,\n    All,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct ShuffleState {\n    pub shuffle: bool,\n    pub originalqueue: Vec<Track>\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct RepeatState {\n    pub repeatmode: RepeatMode,\n    pub originalqueue: Vec<Track>\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct QueueState {\n    pub queue: Vec<Track>,\n    pub history: Vec<Track>\n}\n\n#[derive(Clone, Debug)]\npub struct PlayerState {\n    pub isplaying: bool,\n    pub currenttime: u32, // in seconds\n    pub queuestate: QueueState, \n    pub repeatstate: RepeatState,\n    pub shufflestate: ShuffleState,\n}\n\n#[derive(Clone, Debug)]\npub struct SelectionState {\n    pub selectedcolumn: CurrentColumn,\n    pub selectedplaylist: Option<usize>, \n    pub selectedtrack: Option<usize>\n}\n\n#[derive(Clone, Debug)]\npub struct PopupState {\n    pub onscreen: bool,\n    pub title: String,\n    pub header: String,\n    pub message: Vec<String>,\n    pub dangerous: bool,\n}\n\n#[derive(Clone, Debug)]\npub struct AppState {\n    pub playlists: Vec<Playlist>,\n    pub player: PlayerState,\n    pub popup: PopupState,\n}\n\n"}