[["b3e35a5e-8d31-4eb3-8b58-c76c94b09e8c",{"value":{"selectedCode":"# Print the logo\nprint_logo() {\n    cat << \"EOF\"\n    ______                _ __    __     \n   / ____/______  _______(_) /_  / /__   \n  / /   / ___/ / / / ___/ / __ \\/ / _ \\  \n / /___/ /  / /_/ / /__/ / /_/ / /  __/  Arch Linux System Crafting Tool\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   by: typecraft\n\nEOF\n}","prefix":"#!/bin/bash\n\n","suffix":"\n\n# Clear screen and show logo\nclear\nprint_logo\n\n# Exit on any error\nset -e\n\n# Source utility functions\nsource utils.sh\n\n# Source the package list\nif [ ! -f \"packages.conf\" ]; then\n  echo \"Error: packages.conf not found!\"\n  exit 1\nfi\n\nsource packages.conf\n\necho \"Starting system setup...\"\n\n# Update the system first\necho \"Updating system...\"\nsudo dnf upgrade -y\n\n# Install packages by category\necho \"Installing system utilities...\"\ninstall_packages \"${SYSTEM_UTILS[@]}\"\n\necho \"Installing development tools...\"\ninstall_packages \"${DEV_TOOLS[@]}\"\n\necho \"Installing system maintenance tools...\"\ninstall_packages \"${MAINTENANCE[@]}\"\n\necho \"Installing desktop environment...\"\ninstall_packages \"${DESKTOP[@]}\"\n\necho \"Installing desktop environment...\"\ninstall_packages \"${OFFICE[@]}\"\n\necho \"Installing media packages...\"\ninstall_packages \"${MEDIA[@]}\"\n\necho \"Installing fonts...\"\ninstall_packages \"${FONTS[@]}\"\n\n# Enable services\necho \"Configuring services...\"\nfor service in \"${SERVICES[@]}\"; do\n  if ! systemctl is-enabled \"$service\" &> /dev/null; then\n    echo \"Enabling $service...\"\n    sudo systemctl enable \"$service\"\n  else\n    echo \"$service is already enabled\"\n  fi\ndone\n\n# Some programs just run better as flatpaks. Like discord/spotify\necho \"Installing flatpaks\"\n. install-flatpaks.sh\n\necho \"Setup complete! You may want to reboot your system.\"\n","path":"run.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["755b591b-333e-4d82-a943-55d3c7b1adef",{"value":{"selectedCode":"# Print the logo\nprint_logo() {\n    cat << \"EOF\"\n    ______                _ __    __\n   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  Arch Linux System Crafting Tool\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   by: typecraft\n\nEOF\n}\n\n# Function to display help\nshow_help() {\n  echo \"Usage: $0 [OPTION]\"\n  echo \"Options:\"\n  echo \"  -h, --help                 Display this help message\"\n  echo \"  -i, --install              Install packages from packages.conf (default)\"\n  echo \"  -e, --export [FILENAME]    Export currently installed packages to a file\"\n  echo \"                             Default: ./exported-packages-$(date +%Y%m%d).txt\"\n  echo\n}\n\n# Parse command line arguments\nMODE=\"install\"\nEXPORT_FILE=\"\"\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -i|--install)\n      MODE=\"install\"\n      shift\n      ;;\n    -e|--export)\n      MODE=\"export\"\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        EXPORT_FILE=\"$2\"\n        shift\n      else\n        EXPORT_FILE=\"./exported-packages-$(date +%Y%m%d).txt\"\n      fi\n      shift\n      ;;\n    *)\n      echo \"Unknown option: $1\"\n      show_help","prefix":"#!/bin/bash\n\n","suffix":"\n      exit 1\n      ;;\n  esac\ndone\n\n# Clear screen and show logo\nclear\nprint_logo\n\n# Exit on any error\nset -e\n\n# Source utility functions\nsource utils.sh\n\n# Handle export mode\nif [[ \"$MODE\" == \"export\" ]]; then\n  if [[ -z \"$EXPORT_FILE\" ]]; then\n    EXPORT_FILE=\"./exported-packages-$(date +%Y%m%d).txt\"\n  fi\n  export_installed_packages \"$EXPORT_FILE\"\n  exit 0\nfi\n\n# Continue with installation mode\n# Source the package list\nif [ ! -f \"packages.conf\" ]; then\n  echo \"Error: packages.conf not found!\"\n  exit 1\nfi\n\nsource packages.conf\n\necho \"Starting system setup...\"\n\n# Update the system first\necho \"Updating system...\"\nsudo pacman -Syu --noconfirm\n\n# Install packages by category\necho \"Installing system utilities...\"\ninstall_packages \"${SYSTEM_UTILS[@]}\"\n\necho \"Installing development tools...\"\ninstall_packages \"${DEV_TOOLS[@]}\"\n\necho \"Installing system maintenance tools...\"\ninstall_packages \"${MAINTENANCE[@]}\"\n\necho \"Installing desktop environment...\"\ninstall_packages \"${DESKTOP[@]}\"\n\necho \"Installing desktop environment...\"\ninstall_packages \"${OFFICE[@]}\"\n\necho \"Installing media packages...\"\ninstall_packages \"${MEDIA[@]}\"\n\necho \"Installing fonts...\"\ninstall_packages \"${FONTS[@]}\"\n\n# Enable services\necho \"Configuring services...\"\nfor service in \"${SERVICES[@]}\"; do\n  if ! systemctl is-enabled \"$service\" &> /dev/null; then\n    echo \"Enabling $service...\"\n    sudo systemctl enable \"$service\"\n  else\n    echo \"$service is already enabled\"\n  fi\ndone\n\n# Some programs just run better as flatpaks. Like discord/spotify\necho \"Installing flatpaks\"\n. install-flatpaks.sh\n\necho \"Setup complete! You may want to reboot your system.\"\n","path":"run.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["a887bdd7-ec7f-4013-be50-639293eb3451",{"value":{"selectedCode":"# Print the logo\nprint_logo() {\n    cat << \"EOF\"\n    ______                _ __    __\n   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  Fedora System Crafting Tool\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   by: typecraft\n\nEOF\n}\n\n# Function to display help\nshow_help() {\n  echo \"Usage: $0 [OPTION]\"\n  echo \"Options:\"\n  echo \"  -h, --help                 Display this help message\"\n  echo \"  -i, --install              Install packages from packages.conf (default)\"\n  echo \"  -e, --export [FILENAME]    Export currently installed packages to a file\"\n  echo \"                             Default: ./exported-packages-$(date +%Y%m%d).txt\"\n  echo \"  -d, --download [FILENAME]  Download and install packages from a file\"\n  echo \"                             If no file is specified, it will look for the most recent export\"\n  echo\n}\n\n# Parse command line arguments\nMODE=\"install\"\nEXPORT_FILE=\"\"\nIMPORT_FILE=\"\"\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -i|--install)\n      MODE=\"install\"\n      shift\n      ;;\n    -e|--export)\n      MODE=\"export\"\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        EXPORT_FILE=\"$2\"\n        shift\n      else\n        EXPORT_FILE=\"./exported-packages-$(date +%Y%m%d).txt\"\n      fi\n      shift\n      ;;\n    -d|--download)\n      MODE=\"download\"\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORT_FILE=\"$2\"\n        shift\n      fi\n      shift\n      ;;\n    *)\n      echo \"Unknown option: $1\"\n      show_help","prefix":"#!/bin/bash\n\n","suffix":"\n      exit 1\n      ;;\n  esac\ndone\n\n# Clear screen and show logo\nclear\nprint_logo\n\n# Exit on any error\nset -e\n\n# Source utility functions\nsource utils.sh\n\n# Handle export mode\nif [[ \"$MODE\" == \"export\" ]]; then\n  if [[ -z \"$EXPORT_FILE\" ]]; then\n    EXPORT_FILE=\"./exported-packages-$(date +%Y%m%d).txt\"\n  fi\n  export_installed_packages \"$EXPORT_FILE\"\n  exit 0\nfi\n\n# Handle download mode\nif [[ \"$MODE\" == \"download\" ]]; then\n  if [[ -z \"$IMPORT_FILE\" ]]; then\n    # Find the most recent export file\n    IMPORT_FILE=$(ls -t ./exported-packages-*.txt 2>/dev/null | head -n 1)\n    if [[ -z \"$IMPORT_FILE\" ]]; then\n      echo \"Error: No export file found. Please specify a file with --download FILENAME\"\n      exit 1\n    fi\n    echo \"Using most recent export file: $IMPORT_FILE\"\n  fi\n\n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n\n  # Import and install packages\n  import_and_install_packages \"$IMPORT_FILE\"\n\n  # Install flatpaks if the script exists\n  if [ -f \"install-flatpaks.sh\" ]; then\n    echo \"Installing flatpaks...\"\n    . install-flatpaks.sh\n  fi\n\n  echo \"Download and installation complete! You may want to reboot your system.\"\n  exit 0\nfi\n\n# Continue with installation mode from packages.conf\n# Source the package list\nif [ ! -f \"packages.conf\" ]; then\n  echo \"Error: packages.conf not found!\"\n  exit 1\nfi\n\nsource packages.conf\n\necho \"Starting system setup...\"\n\n# Update the system first\necho \"Updating system...\"\nsudo dnf upgrade -y\n\n# Install packages by category\necho \"Installing system utilities...\"\ninstall_packages \"${SYSTEM_UTILS[@]}\"\n\necho \"Installing development tools...\"\ninstall_packages \"${DEV_TOOLS[@]}\"\n\necho \"Installing system maintenance tools...\"\ninstall_packages \"${MAINTENANCE[@]}\"\n\necho \"Installing desktop environment...\"\ninstall_packages \"${DESKTOP[@]}\"\n\nif [[ -n \"${OFFICE[@]}\" ]]; then\n  echo \"Installing office applications...\"\n  install_packages \"${OFFICE[@]}\"\nfi\n\necho \"Installing media packages...\"\ninstall_packages \"${MEDIA[@]}\"\n\necho \"Installing fonts...\"\ninstall_packages \"${FONTS[@]}\"\n\n# Enable services\necho \"Configuring services...\"\nfor service in \"${SERVICES[@]}\"; do\n  if ! systemctl is-enabled \"$service\" &> /dev/null; then\n    echo \"Enabling $service...\"\n    sudo systemctl enable \"$service\"\n  else\n    echo \"$service is already enabled\"\n  fi\ndone\n\n# Some programs just run better as flatpaks. Like discord/spotify\nif [ -f \"install-flatpaks.sh\" ]; then\n  echo \"Installing flatpaks...\"\n  . install-flatpaks.sh\nfi\n\necho \"Setup complete! You may want to reboot your system.\"\n","path":"run.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["9fbbb93f-4f4a-49f4-ba8c-381dbeb89ada",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\n# Print the logo\nprint_logo() {\n    cat << \"EOF\"\n    ______                _ __    __\n   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  Fedora System Crafting Tool\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   by: typecraft\n\nEOF\n}\n\n# Function to display help\nshow_help() {\n  echo \"Usage: $0 [OPTION]\"\n  echo \"Options:\"\n  echo \"  -h, --help                 Display this help message\"\n  echo \"  -i, --install              Install packages from packages.conf (default)\"\n  echo \"  -e, --export [FILENAME]    Export currently installed packages to a file\"\n  echo \"                             Default: ./exported-packages-$(date +%Y%m%d).txt\"\n  echo \"  -d, --download [FILENAME]  Download and install packages from a file\"\n  echo \"                             If no file is specified, it will look for the most recent export\"\n  echo\n}\n","suffix":"\n# Parse command line arguments\nMODE=\"install\"\nEXPORT_FILE=\"\"\nIMPORT_FILE=\"\"\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -i|--install)\n      MODE=\"install\"\n      shift\n      ;;\n    -e|--export)\n      MODE=\"export\"\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        EXPORT_FILE=\"$2\"\n        shift\n      else\n        EXPORT_FILE=\"./exported-packages-$(date +%Y%m%d).txt\"\n      fi\n      shift\n      ;;\n    -d|--download)\n      MODE=\"download\"\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORT_FILE=\"$2\"\n        shift\n      fi\n      shift\n      ;;\n    *)\n      echo \"Unknown option: $1\"\n      show_help\n      exit 1\n      ;;\n  esac\ndone\n\n# Clear screen and show logo\nclear\nprint_logo\n\n# Exit on any error\nset -e\n\n# Source utility functions\nsource utils.sh\n\n# Handle export mode\nif [[ \"$MODE\" == \"export\" ]]; then\n  if [[ -z \"$EXPORT_FILE\" ]]; then\n    EXPORT_FILE=\"./exported-packages-$(date +%Y%m%d).txt\"\n  fi\n  export_installed_packages \"$EXPORT_FILE\"\n  exit 0\nfi\n\n# Handle download mode\nif [[ \"$MODE\" == \"download\" ]]; then\n  if [[ -z \"$IMPORT_FILE\" ]]; then\n    # Find the most recent export file\n    IMPORT_FILE=$(ls -t ./exported-packages-*.txt 2>/dev/null | head -n 1)\n    if [[ -z \"$IMPORT_FILE\" ]]; then\n      echo \"Error: No export file found. Please specify a file with --download FILENAME\"\n      exit 1\n    fi\n    echo \"Using most recent export file: $IMPORT_FILE\"\n  fi\n\n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n\n  # Import and install packages\n  import_and_install_packages \"$IMPORT_FILE\"\n\n  # Install flatpaks if the script exists\n  if [ -f \"install-flatpaks.sh\" ]; then\n    echo \"Installing flatpaks...\"\n    . install-flatpaks.sh\n  fi\n\n  echo \"Download and installation complete! You may want to reboot your system.\"\n  exit 0\nfi\n\n# Continue with installation mode from packages.conf\n# Source the package list\nif [ ! -f \"packages.conf\" ]; then\n  echo \"Error: packages.conf not found!\"\n  exit 1\nfi\n\nsource packages.conf\n\necho \"Starting system setup...\"\n\n# Update the system first\necho \"Updating system...\"\nsudo dnf upgrade -y\n\n# Install packages by category\necho \"Installing system utilities...\"\ninstall_packages \"${SYSTEM_UTILS[@]}\"\n\necho \"Installing development tools...\"\ninstall_packages \"${DEV_TOOLS[@]}\"\n\necho \"Installing system maintenance tools...\"\ninstall_packages \"${MAINTENANCE[@]}\"\n\necho \"Installing desktop environment...\"\ninstall_packages \"${DESKTOP[@]}\"\n\nif [[ -n \"${OFFICE[@]}\" ]]; then\n  echo \"Installing office applications...\"\n  install_packages \"${OFFICE[@]}\"\nfi\n\necho \"Installing media packages...\"\ninstall_packages \"${MEDIA[@]}\"\n\necho \"Installing fonts...\"\ninstall_packages \"${FONTS[@]}\"\n\n# Enable services\necho \"Configuring services...\"\nfor service in \"${SERVICES[@]}\"; do\n  if ! systemctl is-enabled \"$service\" &> /dev/null; then\n    echo \"Enabling $service...\"\n    sudo systemctl enable \"$service\"\n  else\n    echo \"$service is already enabled\"\n  fi\ndone\n\n# Some programs just run better as flatpaks. Like discord/spotify\nif [ -f \"install-flatpaks.sh\" ]; then\n  echo \"Installing flatpaks...\"\n  . install-flatpaks.sh\nfi\n\necho \"Setup complete! You may want to reboot your system.\"\n","path":"run.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["e6ae942f-ef7e-49bf-ad45-9c54e31f6ce2",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\n# Print the logo\nprint_logo() {\n    cat << \"EOF\"\n    ______                _ __    __\n   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  Fedora System Crafting Tool\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   by: typecraft\n\nEOF\n}\n\n# Function to display help\nshow_help() {\n  echo \"Usage: $0 [OPTION]\"\n  echo \"Options:\"\n  echo \"  -h, --help                 Display this help message\"\n  echo \"  -i, --install              Install packages from packages.conf (default)\"\n  echo \"  -e, --export               Export currently installed packages to a file\"\n  echo \"                             Creates fedora-packages-rpm.txt\"\n  echo \"  -d, --download [FILENAME]  Download and install packages from a file\"\n  echo \"                             Default: fedora-packages-rpm.txt\"\n  echo \"  -c, --current              Export and install currently installed packages\"\n  echo \"                             This is a shortcut for exporting and then installing\"\n  echo\n}\n","suffix":"\n# Parse command line arguments\nMODE=\"install\"\nIMPORT_FILE=\"\"\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -i|--install)\n      MODE=\"install\"\n      shift\n      ;;\n    -e|--export)\n      MODE=\"export\"\n      shift\n      ;;\n    -d|--download)\n      MODE=\"download\"\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORT_FILE=\"$2\"\n        shift\n      fi\n      shift\n      ;;\n    -c|--current)\n      MODE=\"current\"\n      shift\n      ;;\n    *)\n      echo \"Unknown option: $1\"\n      show_help\n      exit 1\n      ;;\n  esac\ndone\n\n# Clear screen and show logo\nclear\nprint_logo\n\n# Exit on any error\nset -e\n\n# Handle export mode\nif [[ \"$MODE\" == \"export\" ]]; then\n  echo \"Exporting currently installed packages...\"\n  ./rpm-export.sh\n  exit 0\nfi\n\n# Handle download mode\nif [[ \"$MODE\" == \"download\" ]]; then\n  if [[ -z \"$IMPORT_FILE\" ]]; then\n    IMPORT_FILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORT_FILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORT_FILE\"\n    exit 1\n  fi\n\n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n\n  # Import and install packages\n  ./install-packages.sh \"$IMPORT_FILE\"\n\n  # Install flatpaks if the script exists\n  if [ -f \"install-flatpaks.sh\" ]; then\n    echo \"Installing flatpaks...\"\n    . install-flatpaks.sh\n  fi\n\n  echo \"Download and installation complete! You may want to reboot your system.\"\n  exit 0\nfi\n\n# Handle current mode (export and install)\nif [[ \"$MODE\" == \"current\" ]]; then\n  echo \"Exporting currently installed packages...\"\n  ./rpm-export.sh\n\n  echo \"Installing exported packages...\"\n  ./install-packages.sh \"fedora-packages-rpm.txt\"\n\n  # Install flatpaks if the script exists\n  if [ -f \"install-flatpaks.sh\" ]; then\n    echo \"Installing flatpaks...\"\n    . install-flatpaks.sh\n  fi\n\n  echo \"Export and installation complete! You may want to reboot your system.\"\n  exit 0\nfi\n\n# Continue with installation mode from packages.conf\n# Source the package list\nif [ ! -f \"packages.conf\" ]; then\n  echo \"Error: packages.conf not found!\"\n  exit 1\nfi\n\nsource packages.conf\n\necho \"Starting system setup...\"\n\n# Update the system first\necho \"Updating system...\"\nsudo dnf upgrade -y\n\n# Install packages by category\necho \"Installing system utilities...\"\nfor pkg in \"${SYSTEM_UTILS[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\necho \"Installing development tools...\"\nfor pkg in \"${DEV_TOOLS[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\necho \"Installing system maintenance tools...\"\nfor pkg in \"${MAINTENANCE[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\necho \"Installing desktop environment...\"\nfor pkg in \"${DESKTOP[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\nif [[ -n \"${OFFICE[@]}\" ]]; then\n  echo \"Installing office applications...\"\n  for pkg in \"${OFFICE[@]}\"; do\n    sudo dnf install -y \"$pkg\"\n  done\nfi\n\necho \"Installing media packages...\"\nfor pkg in \"${MEDIA[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\necho \"Installing fonts...\"\nfor pkg in \"${FONTS[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\n# Enable services\necho \"Configuring services...\"\nfor service in \"${SERVICES[@]}\"; do\n  if ! systemctl is-enabled \"$service\" &> /dev/null; then\n    echo \"Enabling $service...\"\n    sudo systemctl enable \"$service\"\n  else\n    echo \"$service is already enabled\"\n  fi\ndone\n\n# Some programs just run better as flatpaks. Like discord/spotify\nif [ -f \"install-flatpaks.sh\" ]; then\n  echo \"Installing flatpaks...\"\n  . install-flatpaks.sh\nfi\n\necho \"Setup complete! You may want to reboot your system.\"\n","path":"run.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["d1f04074-8603-4da5-b6d7-33b48e899012",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\n# Print the logo\nprint_logo() {\n    cat << \"EOF\"\n    ______                _ __    __\n   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  Fedora System Crafting Tool\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   by: typecraft\n\nEOF\n}\n\n# Function to display help\nshow_help() {\n  echo \"Usage: $0 [OPTION]\"\n  echo \"Options:\"\n  echo \"  -h, --help                 Display this help message\"\n  echo \"  -i, --install              Install packages from packages.conf (default)\"\n  echo \"  -e, --export               Export currently installed packages to a file\"\n  echo \"                             Creates fedora-packages-rpm.txt\"\n  echo \"  -d, --download [FILENAME]  Download and install packages from a file\"\n  echo \"                             Default: fedora-packages-rpm.txt\"\n  echo \"  -c, --current              Export and install currently installed packages\"\n  echo \"                             This is a shortcut for exporting and then installing\"\n  echo\n}\n\n# Parse command line arguments\nMODE=\"install\"\nIMPORT_FILE=\"\"\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -i|--install)\n      MODE=\"install\"\n      shift\n      ;;\n    -e|--export)\n","suffix":"      MODE=\"export\"\n      shift\n      ;;\n    -d|--download)\n      MODE=\"download\"\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORT_FILE=\"$2\"\n        shift\n      fi\n      shift\n      ;;\n    -c|--current)\n      MODE=\"current\"\n      shift\n      ;;\n    *)\n      echo \"Unknown option: $1\"\n      show_help\n      exit 1\n      ;;\n  esac\ndone\n\n# Clear screen and show logo\nclear\nprint_logo\n\n# Exit on any error\nset -e\n\n# Handle export mode\nif [[ \"$MODE\" == \"export\" ]]; then\n  echo \"Exporting currently installed packages...\"\n  ./rpm-export.sh\n  exit 0\nfi\n\n# Handle download mode\nif [[ \"$MODE\" == \"download\" ]]; then\n  if [[ -z \"$IMPORT_FILE\" ]]; then\n    IMPORT_FILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORT_FILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORT_FILE\"\n    exit 1\n  fi\n\n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n\n  # Import and install packages\n  ./install-packages.sh \"$IMPORT_FILE\"\n\n  # Install flatpaks if the script exists\n  if [ -f \"install-flatpaks.sh\" ]; then\n    echo \"Installing flatpaks...\"\n    . install-flatpaks.sh\n  fi\n\n  echo \"Download and installation complete! You may want to reboot your system.\"\n  exit 0\nfi\n\n# Handle current mode (export and install)\nif [[ \"$MODE\" == \"current\" ]]; then\n  echo \"Exporting currently installed packages...\"\n  ./rpm-export.sh\n\n  echo \"Installing exported packages...\"\n  ./install-packages.sh \"fedora-packages-rpm.txt\"\n\n  # Install flatpaks if the script exists\n  if [ -f \"install-flatpaks.sh\" ]; then\n    echo \"Installing flatpaks...\"\n    . install-flatpaks.sh\n  fi\n\n  echo \"Export and installation complete! You may want to reboot your system.\"\n  exit 0\nfi\n\n# Continue with installation mode from packages.conf\n# Source the package list\nif [ ! -f \"packages.conf\" ]; then\n  echo \"Error: packages.conf not found!\"\n  exit 1\nfi\n\nsource packages.conf\n\necho \"Starting system setup...\"\n\n# Update the system first\necho \"Updating system...\"\nsudo dnf upgrade -y\n\n# Install packages by category\necho \"Installing system utilities...\"\nfor pkg in \"${SYSTEM_UTILS[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\necho \"Installing development tools...\"\nfor pkg in \"${DEV_TOOLS[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\necho \"Installing system maintenance tools...\"\nfor pkg in \"${MAINTENANCE[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\necho \"Installing desktop environment...\"\nfor pkg in \"${DESKTOP[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\nif [[ -n \"${OFFICE[@]}\" ]]; then\n  echo \"Installing office applications...\"\n  for pkg in \"${OFFICE[@]}\"; do\n    sudo dnf install -y \"$pkg\"\n  done\nfi\n\necho \"Installing media packages...\"\nfor pkg in \"${MEDIA[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\necho \"Installing fonts...\"\nfor pkg in \"${FONTS[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\n# Enable services\necho \"Configuring services...\"\nfor service in \"${SERVICES[@]}\"; do\n  if ! systemctl is-enabled \"$service\" &> /dev/null; then\n    echo \"Enabling $service...\"\n    sudo systemctl enable \"$service\"\n  else\n    echo \"$service is already enabled\"\n  fi\ndone\n\n# Some programs just run better as flatpaks. Like discord/spotify\nif [ -f \"install-flatpaks.sh\" ]; then\n  echo \"Installing flatpaks...\"\n  . install-flatpaks.sh\nfi\n\necho \"Setup complete! You may want to reboot your system.\"\n","path":"run.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["10fa2e03-00a5-43c6-95a5-f7b7ad4bd00b",{"value":{"selectedCode":"","prefix":"if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"Cartograph CF installed successfully\"\nelse\n    echo\n    echo \"failed to download cartograph CF :(\"\nfi\n","suffix":"","path":"install-fonts.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["72a64f32-f4ae-45ea-ab56-a0992fdf7a30",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n","suffix":"\n# Print the logo\nprint_logo() {\n    cat << \"EOF\"\n    ______                _ __    __\n   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  Fedora System Crafting Tool\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   by: typecraft\n\nEOF\n}\n\n# Function to display help\nshow_help() {\n  echo \"Usage: $0 [OPTION]\"\n  echo \"Options:\"\n  echo \"  -h, --help                 Display this help message\"\n  echo \"  -a, --all                  Install everything (default)\"\n  echo \"  -p, --packages             Install packages from packages.conf\"\n  echo \"  -f, --flatpaks             Install flatpaks\"\n  echo \"  -t, --fonts                Install fonts\"\n  echo \"  -d, --download [FILENAME]  Install packages from a file\"\n  echo \"                             Default: fedora-packages-rpm.txt\"\n  echo \"  -e, --export               Export currently installed packages to a file\"\n  echo \"                             Creates fedora-packages-rpm.txt\"\n  echo \"  -c, --current              Export and install currently installed packages\"\n  echo\n}\n\n# Parse command line arguments\nINSTALL_PACKAGES=false\nINSTALL_FLATPAKS=false\nINSTALL_FONTS=false\nEXPORT_PACKAGES=false\nIMPORT_PACKAGES=false\nIMPORT_FILE=\"\"\n\n# If no arguments, install everything\nif [ $# -eq 0 ]; then\n  INSTALL_PACKAGES=true\n  INSTALL_FLATPAKS=true\n  INSTALL_FONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -a|--all)\n      INSTALL_PACKAGES=true\n      INSTALL_FLATPAKS=true\n      INSTALL_FONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALL_PACKAGES=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALL_FLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALL_FONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORT_PACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORT_PACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORT_FILE=\"$2\"\n        shift\n      else\n        IMPORT_FILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORT_PACKAGES=true\n      IMPORT_PACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"Unknown option: $1\"\n      show_help\n      exit 1\n      ;;\n  esac\ndone\n\n# Clear screen and show logo\nclear\nprint_logo\n\n# Exit on any error\nset -e\n\n# Export packages if requested\nif [[ \"$EXPORT_PACKAGES\" == true ]]; then\n  echo \"Exporting currently installed packages...\"\n  \n  OUTPUT_FILE=\"./fedora-packages-rpm.txt\"\n  \n  echo \"Exporting installed packages to $OUTPUT_FILE...\"\n  \n  # Export header\n  echo \"# Fedora packages installed on $(date)\" > \"$OUTPUT_FILE\"\n  echo \"# Generated by Furnace\" >> \"$OUTPUT_FILE\"\n  echo \"\" >> \"$OUTPUT_FILE\"\n  \n  # Export user-installed packages\n  echo \"# User-installed packages\" >> \"$OUTPUT_FILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$OUTPUT_FILE\"\n  \n  echo \"Package list exported successfully to $OUTPUT_FILE\"\nfi\n\n# Import packages if requested\nif [[ \"$IMPORT_PACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORT_FILE\" ]]; then\n    IMPORT_FILE=\"fedora-packages-rpm.txt\"\n  fi\n  \n  if [ ! -f \"$IMPORT_FILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORT_FILE\"\n    exit 1\n  fi\n  \n  echo \"Installing packages from $IMPORT_FILE...\"\n  \n  # Read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # Skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # Check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORT_FILE\"\n  \n  # Install packages in batches of 50 to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"Found ${#PACKAGES[@]} packages to install\"\n    \n    # Install in batches of 50\n    BATCH_SIZE=50\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n    \n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n      \n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n    \n    echo \"All packages have been installed!\"\n  else\n    echo \"No new packages found to install in $IMPORT_FILE\"\n  fi\nfi\n\n# Install packages from packages.conf\nif [[ \"$INSTALL_PACKAGES\" == true ]]; then\n  # Source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"Error: packages.conf not found!\"\n    exit 1\n  fi\n  \n  source packages.conf\n  \n  echo \"Starting system setup...\"\n  \n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n  \n  # Function to install packages in batches\n  install_packages() {\n    local packages=(\"$@\")\n    \n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n    \n    echo \"Installing packages...\"\n    \n    # Install in batches of 20 to avoid command line length issues\n    local batch_size=20\n    local total_packages=${#packages[@]}\n    local batches=$(( (total_packages + batch_size - 1) / batch_size ))\n    \n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batch_size))\n      local end=$(( (i+1) * batch_size > total_packages ? total_packages : (i+1) * batch_size ))\n      local batch=(\"${packages[@]:start:end-start}\")\n      \n      echo \"Installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n  \n  # Install all packages\n  install_packages \"${PACKAGES[@]}\"\n  \n  # Enable services\n  echo \"Configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"Enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# Install flatpaks\nif [[ \"$INSTALL_FLATPAKS\" == true ]]; then\n  echo \"Installing flatpaks...\"\n  \n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n  \n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALL_FONTS\" == true ]]; then\n  echo \"Installing fonts...\"\n  \n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"Cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"Setup complete! You may want to reboot your system.\"\n","path":"install.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["81f16989-1179-481f-ab26-bd151310c736",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\n# Print the logo\nprint_logo() {\n    cat << \"EOF\"\n    ______                _ __    __\n   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  Fedora System Crafting Tool\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   by: typecraft\n\nEOF\n}\n\n","suffix":"# Function to display help\nshow_help() {\n  echo \"Usage: $0 [OPTION]\"\n  echo \"Options:\"\n  echo \"  -h, --help                 Display this help message\"\n  echo \"  -a, --all                  Install everything (default)\"\n  echo \"  -p, --packages             Install packages from packages.conf\"\n  echo \"  -f, --flatpaks             Install flatpaks\"\n  echo \"  -t, --fonts                Install fonts\"\n  echo \"  -d, --download [FILENAME]  Install packages from a file\"\n  echo \"                             Default: fedora-packages-rpm.txt\"\n  echo \"  -e, --export               Export currently installed packages to a file\"\n  echo \"                             Creates fedora-packages-rpm.txt\"\n  echo \"  -c, --current              Export and install currently installed packages\"\n  echo\n}\n\n# Parse command line arguments\nINSTALL_PACKAGES=false\nINSTALL_FLATPAKS=false\nINSTALL_FONTS=false\nEXPORT_PACKAGES=false\nIMPORT_PACKAGES=false\nIMPORT_FILE=\"\"\n\n# If no arguments, install everything\nif [ $# -eq 0 ]; then\n  INSTALL_PACKAGES=true\n  INSTALL_FLATPAKS=true\n  INSTALL_FONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -a|--all)\n      INSTALL_PACKAGES=true\n      INSTALL_FLATPAKS=true\n      INSTALL_FONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALL_PACKAGES=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALL_FLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALL_FONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORT_PACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORT_PACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORT_FILE=\"$2\"\n        shift\n      else\n        IMPORT_FILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORT_PACKAGES=true\n      IMPORT_PACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"Unknown option: $1\"\n      show_help\n      exit 1\n      ;;\n  esac\ndone\n\n# Clear screen and show logo\nclear\nprint_logo\n\n# Exit on any error\nset -e\n\n# Export packages if requested\nif [[ \"$EXPORT_PACKAGES\" == true ]]; then\n  echo \"Exporting currently installed packages...\"\n  \n  OUTPUT_FILE=\"./fedora-packages-rpm.txt\"\n  \n  echo \"Exporting installed packages to $OUTPUT_FILE...\"\n  \n  # Export header\n  echo \"# Fedora packages installed on $(date)\" > \"$OUTPUT_FILE\"\n  echo \"# Generated by Furnace\" >> \"$OUTPUT_FILE\"\n  echo \"\" >> \"$OUTPUT_FILE\"\n  \n  # Export user-installed packages\n  echo \"# User-installed packages\" >> \"$OUTPUT_FILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$OUTPUT_FILE\"\n  \n  echo \"Package list exported successfully to $OUTPUT_FILE\"\nfi\n\n# Import packages if requested\nif [[ \"$IMPORT_PACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORT_FILE\" ]]; then\n    IMPORT_FILE=\"fedora-packages-rpm.txt\"\n  fi\n  \n  if [ ! -f \"$IMPORT_FILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORT_FILE\"\n    exit 1\n  fi\n  \n  echo \"Installing packages from $IMPORT_FILE...\"\n  \n  # Read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # Skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # Check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORT_FILE\"\n  \n  # Install packages in batches of 50 to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"Found ${#PACKAGES[@]} packages to install\"\n    \n    # Install in batches of 50\n    BATCH_SIZE=50\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n    \n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n      \n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n    \n    echo \"All packages have been installed!\"\n  else\n    echo \"No new packages found to install in $IMPORT_FILE\"\n  fi\nfi\n\n# Install packages from packages.conf\nif [[ \"$INSTALL_PACKAGES\" == true ]]; then\n  # Source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"Error: packages.conf not found!\"\n    exit 1\n  fi\n  \n  source packages.conf\n  \n  echo \"Starting system setup...\"\n  \n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n  \n  # Function to install packages in batches\n  install_packages() {\n    local packages=(\"$@\")\n    \n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n    \n    echo \"Installing packages...\"\n    \n    # Install in batches of 20 to avoid command line length issues\n    local batch_size=20\n    local total_packages=${#packages[@]}\n    local batches=$(( (total_packages + batch_size - 1) / batch_size ))\n    \n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batch_size))\n      local end=$(( (i+1) * batch_size > total_packages ? total_packages : (i+1) * batch_size ))\n      local batch=(\"${packages[@]:start:end-start}\")\n      \n      echo \"Installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n  \n  # Install all packages\n  install_packages \"${PACKAGES[@]}\"\n  \n  # Enable services\n  echo \"Configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"Enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# Install flatpaks\nif [[ \"$INSTALL_FLATPAKS\" == true ]]; then\n  echo \"Installing flatpaks...\"\n  \n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n  \n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALL_FONTS\" == true ]]; then\n  echo \"Installing fonts...\"\n  \n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"Cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"Setup complete! You may want to reboot your system.\"\n","path":"install.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["6e1f674d-a450-4571-a7ce-200709f53a18",{"value":{"selectedCode":"","prefix":"# Furnace 🛠️\n","suffix":"\nA Fedora System Tool that automates the setup and configuration of a Fedora system. It can export your currently installed packages and install them on another system, or install packages from a predefined list.\n\n## Features\n\n- 🔄 Automated system updates\n- 📦 Simple package installation from a single list\n- 📋 Export currently installed packages to a file\n- 📥 Install packages from an exported list\n- 🎮 Flatpak integration for specific applications\n- 🔤 Custom font installation\n- ⚙️ Automatic service configuration\n\n## Prerequisites\n\n- Fedora Linux\n- Internet connection\n- sudo privileges\n\n## Usage\n\n### All-in-one installation\n\n```bash\n./install.sh\n```\n\nThis will install everything: packages from packages.conf, flatpaks, and fonts.\n\n### Install specific components\n\n```bash\n./install.sh --packages    # Install only packages from packages.conf\n./install.sh --flatpaks    # Install only flatpaks\n./install.sh --fonts       # Install only fonts\n```\n\nYou can combine options:\n\n```bash\n./install.sh --packages --flatpaks    # Install packages and flatpaks, but not fonts\n```\n\n### Export your currently installed packages\n\n```bash\n./install.sh --export\n```\n\nThis will create two files:\n- `fedora-packages-rpm.txt`: A simple list of all your currently installed packages\n- `packages-exported.conf`: A configuration file in the same format as `packages.conf` that can be used directly with the installation script\n\n### Install packages from an export file\n\n```bash\n./install.sh --download [FILENAME]\n```\n\nIf you don't specify a filename, it will use `fedora-packages-rpm.txt` by default.\n\n### Export and install in one step\n\n```bash\n./install.sh --current\n```\n\nThis will export your currently installed packages and then install them, which is useful for setting up a new system with the same packages.\n\n### See all available options\n\n```bash\n./install.sh --help\n```\n","path":"README.md","language":"markdown","prefixBegin":0,"suffixEnd":0}}],["305ea1bc-b479-4361-86e7-b061a9f53283",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\n# Print the logo\nprintlogo() {\n    cat << \"EOF\"\n    ______                _ __    __\n","suffix":"   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\  fedora system crafting tool\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  original by: typecraft\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   fork by: ellipticobj\n\nEOF\n}\n\n# function to display help\nshow_help() {\n  echo \"usage: $0 [OPTION]\"\n  echo \"options:\"\n  echo \"  -h, --help                 display this help message\"\n  echo \"  -a, --all                  install everything (default)\"\n  echo \"  -p, --packages             install packages from packages.conf\"\n  echo \"  -f, --flatpaks             install flatpaks\"\n  echo \"  -t, --fonts                install fonts\"\n  echo \"  -d, --download [FILENAME]  install packages from a file\"\n  echo \"  -e, --export               export currently installed packages to files\"\n  echo \"                             creates fedora-packages-rpm.txt and packages-exported.conf\"\n  echo \"  -c, --current              export and install currently installed packages\"\n  echo\n}\n\nINSTALLPKGS=false\nINSTALLFLATPAKS=false\nINSTALLFONTS=false\nEXPORTPACKAGES=false\nIMPORTPACKAGES=false\nIMPORTFILE=\"\"\n\n# install everything if no args\nif [ $# -eq 0 ]; then\n  INSTALLPKGS=true\n  INSTALLFLATPAKS=true\n  INSTALLFONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -a|--all)\n      INSTALLPKGS=true\n      INSTALLFLATPAKS=true\n      INSTALLFONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALLPKGS=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALLFLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALLFONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORTPACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORTPACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORTFILE=\"$2\"\n        shift\n      else\n        IMPORTFILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORTPACKAGES=true\n      IMPORTPACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"unknown option: $1\"\n      show_help\n      exit 1\n      ;;\n  esac\ndone\n\n# clear screen and show logo\nprintlogo\n\n# exit on any error\nset -e\n\n# export packages if requested\nif [[ \"$EXPORTPACKAGES\" == true ]]; then\n  echo \"exporting currently installed packages...\"\n\n  # export to both formats\n  RPMOUTPUTFILE=\"./fedora-packages-rpm.txt\"\n  CONFOUTPUTFILE=\"./packages-exported.conf\"\n\n  echo \"exporting installed packages to $RPMOUTPUTFILE and $CONFOUTPUTFILE...\"\n\n  # export to rpm text format\n  echo \"# fedora packages installed on $(date)\" > \"$RPMOUTPUTFILE\"\n  echo \"# generated by furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"# https://github.com/ellipticobj/furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"\" >> \"$RPMOUTPUTFILE\"\n  echo \"# user-installed packages\" >> \"$RPMOUTPUTFILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$RPMOUTPUTFILE\"\n\n  # export to packages.conf format\n  echo \"# Fedora packages installed on $(date)\" > \"$CONFOUTPUTFILE\"\n  echo \"# Generated by Furnace\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# All packages to install\" >> \"$CONFOUTPUTFILE\"\n  echo \"PACKAGES=(\" >> \"$CONFOUTPUTFILE\"\n\n  # get the list of installed packages\n  rpm -qa --qf \"%{NAME}\\n\" | sort | while read -r package; do\n    echo \"  $package\" >> \"$CONFOUTPUTFILE\"\n  done\n\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# services\" >> \"$CONFOUTPUTFILE\"\n  echo \"SERVICES=(\" >> \"$CONFOUTPUTFILE\"\n  echo \"  NetworkManager.service\" >> \"$CONFOUTPUTFILE\"\n  echo \"  bluetooth.service\" >> \"$CONFOUTPUTFILE\"\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n\n  echo \"package list exported successfully to $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\nfi\n\n# import packages if requested\nif [[ \"$IMPORTPACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORTFILE\" ]]; then\n    IMPORTFILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORTFILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORTFILE\"\n    exit 1\n  fi\n\n  echo \"installing packages from $IMPORTFILE...\"\n\n  # Read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # Skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # Check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORTFILE\"\n\n  # Install packages in batches of 50 to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"found ${#PACKAGES[@]} packages to install\"\n\n    # Install in batches of 50\n    BATCH_SIZE=50\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"all packages have been installed\"\n  else\n    echo \"no new packages found to install in $IMPORTFILE\"\n  fi\nfi\n\n# Install packages from packages.conf\nif [[ \"$INSTALLPKGS\" == true ]]; then\n  # Source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"error: packages.conf not found\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"starting system setup...\"\n\n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n\n  # Function to install packages in batches\n  installpkgs() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"installing packages...\"\n\n    # Install in batches to avoid command line length issues\n    local batchsize=20\n    local totalpackages=${#packages[@]}\n    local batches=$(( (totalpackages + batchsize - 1) / batchsize ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batchsize))\n      local end=$(( (i+1) * batchsize > totalpackages ? totalpackages : (i+1) * batchsize ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # install all packages\n  installpkgs \"${PACKAGES[@]}\"\n\n  # enable services\n  echo \"configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# install flatpaks\nif [[ \"$INSTALLFLATPAKS\" == true ]]; then\n  echo \"installing flatpaks...\"\n\n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALLFONTS\" == true ]]; then\n  echo \"installing fonts...\"\n\n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"complete!\"\n","path":"install.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["8824398c-d278-4952-b4d5-f4b06f4a7e29",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\n# Print the logo\nprintlogo() {\n    cat << \"EOF\"\n    ______\n   / ____/_  _________  ____ _________\n","suffix":"  / /_  / / / / ___/ / / / // / __/ _ \\\n / __/ / /_/ / /  / /_/ / _  / /_/  __/  Fedora System Tool\n/_/    \\__,_/_/   \\__,_/_//_/\\__/\\___/   by: ellipticobj\n\nEOF\n}\n\n# function to display help\nshow_help() {\n  echo \"usage: $0 [OPTION]\"\n  echo \"options:\"\n  echo \"  -h, --help                 display this help message\"\n  echo \"  -a, --all                  install everything (default)\"\n  echo \"  -p, --packages             install packages from packages.conf\"\n  echo \"  -f, --flatpaks             install flatpaks\"\n  echo \"  -t, --fonts                install fonts\"\n  echo \"  -d, --download [FILENAME]  install packages from a file\"\n  echo \"  -e, --export               export currently installed packages to files\"\n  echo \"                             creates fedora-packages-rpm.txt and packages-exported.conf\"\n  echo \"  -c, --current              export and install currently installed packages\"\n  echo\n}\n\nINSTALLPKGS=false\nINSTALLFLATPAKS=false\nINSTALLFONTS=false\nEXPORTPACKAGES=false\nIMPORTPACKAGES=false\nIMPORTFILE=\"\"\n\n# install everything if no args\nif [ $# -eq 0 ]; then\n  INSTALLPKGS=true\n  INSTALLFLATPAKS=true\n  INSTALLFONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -a|--all)\n      INSTALLPKGS=true\n      INSTALLFLATPAKS=true\n      INSTALLFONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALLPKGS=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALLFLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALLFONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORTPACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORTPACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORTFILE=\"$2\"\n        shift\n      else\n        IMPORTFILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORTPACKAGES=true\n      IMPORTPACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"unknown option: $1\"\n      show_help\n      exit 1\n      ;;\n  esac\ndone\n\n# clear screen and show logo\nprintlogo\n\n# exit on any error\nset -e\n\n# export packages if requested\nif [[ \"$EXPORTPACKAGES\" == true ]]; then\n  echo \"exporting currently installed packages...\"\n\n  # export to both formats\n  RPMOUTPUTFILE=\"./fedora-packages-rpm.txt\"\n  CONFOUTPUTFILE=\"./packages-exported.conf\"\n\n  echo \"exporting installed packages to $RPMOUTPUTFILE and $CONFOUTPUTFILE...\"\n\n  # export to rpm text format\n  echo \"# fedora packages installed on $(date)\" > \"$RPMOUTPUTFILE\"\n  echo \"# generated by furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"# https://github.com/ellipticobj/furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"\" >> \"$RPMOUTPUTFILE\"\n  echo \"# user-installed packages\" >> \"$RPMOUTPUTFILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$RPMOUTPUTFILE\"\n\n  # export to packages.conf format\n  echo \"# Fedora packages installed on $(date)\" > \"$CONFOUTPUTFILE\"\n  echo \"# Generated by Furnace\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# All packages to install\" >> \"$CONFOUTPUTFILE\"\n  echo \"PACKAGES=(\" >> \"$CONFOUTPUTFILE\"\n\n  # get the list of installed packages\n  rpm -qa --qf \"%{NAME}\\n\" | sort | while read -r package; do\n    echo \"  $package\" >> \"$CONFOUTPUTFILE\"\n  done\n\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# services\" >> \"$CONFOUTPUTFILE\"\n  echo \"SERVICES=(\" >> \"$CONFOUTPUTFILE\"\n  echo \"  NetworkManager.service\" >> \"$CONFOUTPUTFILE\"\n  echo \"  bluetooth.service\" >> \"$CONFOUTPUTFILE\"\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n\n  echo \"package list exported successfully to $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\nfi\n\n# import packages if requested\nif [[ \"$IMPORTPACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORTFILE\" ]]; then\n    IMPORTFILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORTFILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORTFILE\"\n    exit 1\n  fi\n\n  echo \"installing packages from $IMPORTFILE...\"\n\n  # Read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # Skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # Check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORTFILE\"\n\n  # Install packages in batches of 50 to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"found ${#PACKAGES[@]} packages to install\"\n\n    # Install in batches of 50\n    BATCH_SIZE=50\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"all packages have been installed\"\n  else\n    echo \"no new packages found to install in $IMPORTFILE\"\n  fi\nfi\n\n# Install packages from packages.conf\nif [[ \"$INSTALLPKGS\" == true ]]; then\n  # Source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"error: packages.conf not found\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"starting system setup...\"\n\n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n\n  # Function to install packages in batches\n  installpkgs() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"installing packages...\"\n\n    # Install in batches to avoid command line length issues\n    local batchsize=20\n    local totalpackages=${#packages[@]}\n    local batches=$(( (totalpackages + batchsize - 1) / batchsize ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batchsize))\n      local end=$(( (i+1) * batchsize > totalpackages ? totalpackages : (i+1) * batchsize ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # install all packages\n  installpkgs \"${PACKAGES[@]}\"\n\n  # enable services\n  echo \"configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# install flatpaks\nif [[ \"$INSTALLFLATPAKS\" == true ]]; then\n  echo \"installing flatpaks...\"\n\n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALLFONTS\" == true ]]; then\n  echo \"installing fonts...\"\n\n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"complete!\"\n","path":"install.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["41b630c7-7aa4-446c-a911-30d5edc84f49",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\nprintlogo() {\n    cat << \"EOF\"\n    ______                               \n   / ____/_  ___________  ____ _________ \n  / /_  / / / / ___/ __ \\/ __ `/ ___/ _ \\ fedora system crafting tool\n / __/ / /_/ / /  / / / / /_/ / /__/  __/ original by: typecraft\n/_/    \\__,_/_/  /_/ /_/\\__,_/\\___/\\___/  fork by: ellipticobj\n\nEOF\n}\n\nshowhelp() {\n  echo \"usage: $0 [OPTION]\"\n  echo \"options:\"\n  echo \"  -h, --help                 display this help message\"\n  echo \"  -a, --all                  install everything (default)\"\n  echo \"  -p, --packages             install packages from packages.conf\"\n  echo \"  -f, --flatpaks             install flatpaks\"\n  echo \"  -t, --fonts                install fonts\"\n  echo \"  -d, --download [FILENAME]  install packages from a file\"\n  echo \"  -e, --export               export currently installed packages to files\"\n  echo \"                             creates fedora-packages-rpm.txt and packages-exported.conf\"\n  echo \"  -c, --current              export and install currently installed packages\"\n  echo\n}\n\nINSTALLPKGS=false\nINSTALLFLATPAKS=false\nINSTALLFONTS=false\nEXPORTPACKAGES=false\nIMPORTPACKAGES=false\nIMPORTFILE=\"\"\n\n# install everything if no args\nif [ $# -eq 0 ]; then\n  INSTALLPKGS=true\n  INSTALLFLATPAKS=true\n  INSTALLFONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      showhelp\n      exit 0\n      ;;\n    -a|--all)\n      INSTALLPKGS=true\n      INSTALLFLATPAKS=true\n      INSTALLFONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALLPKGS=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALLFLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALLFONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORTPACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORTPACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORTFILE=\"$2\"\n        shift\n      else\n        IMPORTFILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORTPACKAGES=true\n      IMPORTPACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"unknown option: $1\"\n      showhelp\n      exit 1\n      ;;\n  esac\ndone\n\n# clear screen and show logo\nprintlogo\n\n# exit on any error\nset -e\n\n# export packages if requested\nif [[ \"$EXPORTPACKAGES\" == true ]]; then\n  echo \"exporting currently installed packages...\"\n\n  # export to both formats\n  RPMOUTPUTFILE=\"./fedora-packages-rpm.txt\"\n  CONFOUTPUTFILE=\"./packages-exported.conf\"\n\n  echo \"exporting installed packages to $RPMOUTPUTFILE and $CONFOUTPUTFILE...\"\n\n  # export to rpm text format\n  echo \"# fedora packages installed on $(date)\" > \"$RPMOUTPUTFILE\"\n  echo \"# generated by furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"# https://github.com/ellipticobj/furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"\" >> \"$RPMOUTPUTFILE\"\n  echo \"# user-installed packages\" >> \"$RPMOUTPUTFILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$RPMOUTPUTFILE\"\n\n  # export to packages.conf format\n  echo \"# Fedora packages installed on $(date)\" > \"$CONFOUTPUTFILE\"\n  echo \"# Generated by Furnace\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# All packages to install\" >> \"$CONFOUTPUTFILE\"\n  echo \"PACKAGES=(\" >> \"$CONFOUTPUTFILE\"\n\n  # get the list of installed packages\n  rpm -qa --qf \"%{NAME}\\n\" | sort | while read -r package; do\n    echo \"  $package\" >> \"$CONFOUTPUTFILE\"\n  done\n\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# services\" >> \"$CONFOUTPUTFILE\"\n  echo \"SERVICES=(\" >> \"$CONFOUTPUTFILE\"\n  echo \"  NetworkManager.service\" >> \"$CONFOUTPUTFILE\"\n  echo \"  bluetooth.service\" >> \"$CONFOUTPUTFILE\"\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n\n  echo \"package list exported successfully to $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\nfi\n\n# import packages if requested\nif [[ \"$IMPORTPACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORTFILE\" ]]; then\n    IMPORTFILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORTFILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORTFILE\"\n    exit 1\n  fi\n\n  echo \"installing packages from $IMPORTFILE...\"\n\n  # read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORTFILE\"\n\n  # install packages in batches to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"found ${#PACKAGES[@]} packages to install\"\n\n    # install in batches\n    BATCH_SIZE=30\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"all packages have been installed\"\n  else\n    echo \"no new packages found to install in $IMPORTFILE\"\n  fi\nfi\n\n# install packages from packages.conf\nif [[ \"$INSTALLPKGS\" == true ]]; then\n  # source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"error: packages.conf not found\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"starting system setup...\"\n\n  # update the system first\n  echo \"updating system...\"\n  sudo dnf upgrade -y\n\n  # install packages in batches\n  installpkgs() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"installing packages...\"\n\n    # install in batches to avoid command line length issues\n    local batchsize=20\n","suffix":"    local totalpackages=${#packages[@]}\n    local batches=$(( (totalpackages + batchsize - 1) / batchsize ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batchsize))\n      local end=$(( (i+1) * batchsize > totalpackages ? totalpackages : (i+1) * batchsize ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # install all packages\n  installpkgs \"${PACKAGES[@]}\"\n\n  # enable services\n  echo \"configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# install flatpaks\nif [[ \"$INSTALLFLATPAKS\" == true ]]; then\n  echo \"installing flatpaks...\"\n\n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALLFONTS\" == true ]]; then\n  echo \"installing fonts...\"\n\n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"complete!\"\n","path":"install.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["45cf69fc-975b-49a8-80cd-2cd43a730b9c",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\n#------------------------------------------------------------------------------\n# Configuration variables\n#------------------------------------------------------------------------------\n\n# Command line flags\nINSTALLPKGS=false\nINSTALLFLATPAKS=false\nINSTALLFONTS=false\nEXPORTPACKAGES=false\nIMPORTPACKAGES=false\nIMPORTFILE=\"\"\n\n# Export file paths\nRPMOUTPUTFILE=\"./fedora-packages-rpm.txt\"\nCONFOUTPUTFILE=\"./packages-exported.conf\"\n\n# Batch sizes for package installation\nBATCH_SIZE=30\nSMALL_BATCH_SIZE=20\n\n# List of flatpaks to install\nFLATPAKS=(\n  \"app.zen_browser.zen\"\n)\n\n#------------------------------------------------------------------------------\n# Functions\n#------------------------------------------------------------------------------\n\n# Print the logo\nprintlogo() {\n    cat << \"EOF\"\n    ______\n   / ____/_  ___________  ____ _________\n  / /_  / / / / ___/ __ \\/ __ `/ ___/ _ \\ fedora system crafting tool\n / __/ / /_/ / /  / / / / /_/ / /__/  __/ original by: typecraft\n/_/    \\__,_/_/  /_/ /_/\\__,_/\\___/\\___/  fork by: ellipticobj\n\nEOF\n}\n\n# Show help message\nshowhelp() {\n  echo \"usage: $0 [OPTION]\"\n  echo \"options:\"\n  echo \"  -h, --help                 display this help message\"\n  echo \"  -a, --all                  install everything (default)\"\n  echo \"  -p, --packages             install packages from packages.conf\"\n  echo \"  -f, --flatpaks             install flatpaks\"\n  echo \"  -t, --fonts                install fonts\"\n  echo \"  -d, --download [FILENAME]  install packages from a file\"\n  echo \"  -e, --export               export currently installed packages to files\"\n  echo \"                             creates $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\n  echo \"  -c, --current              export and install currently installed packages\"\n  echo\n}\n\n# install everything if no args\nif [ $# -eq 0 ]; then\n  INSTALLPKGS=true\n  INSTALLFLATPAKS=true\n  INSTALLFONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      showhelp\n      exit 0\n      ;;\n    -a|--all)\n      INSTALLPKGS=true\n      INSTALLFLATPAKS=true\n      INSTALLFONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALLPKGS=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALLFLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALLFONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORTPACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORTPACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORTFILE=\"$2\"\n        shift\n      else\n        IMPORTFILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORTPACKAGES=true\n      IMPORTPACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"unknown option: $1\"\n      showhelp\n      exit 1\n      ;;\n  esac\ndone\n\n# clear screen and show logo\nprintlogo\n\n# exit on any error\nset -e\n\n# export packages if requested\nif [[ \"$EXPORTPACKAGES\" == true ]]; then\n  echo \"exporting currently installed packages...\"\n\n  # export to both formats\n  RPMOUTPUTFILE=\"./fedora-packages-rpm.txt\"\n  CONFOUTPUTFILE=\"./packages-exported.conf\"\n\n  echo \"exporting installed packages to $RPMOUTPUTFILE and $CONFOUTPUTFILE...\"\n\n  # export to rpm text format\n  echo \"# fedora packages installed on $(date)\" > \"$RPMOUTPUTFILE\"\n  echo \"# generated by furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"# https://github.com/ellipticobj/furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"\" >> \"$RPMOUTPUTFILE\"\n  echo \"# user-installed packages\" >> \"$RPMOUTPUTFILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$RPMOUTPUTFILE\"\n\n  # export to packages.conf format\n  echo \"# Fedora packages installed on $(date)\" > \"$CONFOUTPUTFILE\"\n  echo \"# Generated by Furnace\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# All packages to install\" >> \"$CONFOUTPUTFILE\"\n  echo \"PACKAGES=(\" >> \"$CONFOUTPUTFILE\"\n\n  # get the list of installed packages\n  rpm -qa --qf \"%{NAME}\\n\" | sort | while read -r package; do\n    echo \"  $package\" >> \"$CONFOUTPUTFILE\"\n  done\n\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# services\" >> \"$CONFOUTPUTFILE\"\n  echo \"SERVICES=(\" >> \"$CONFOUTPUTFILE\"\n  echo \"  NetworkManager.service\" >> \"$CONFOUTPUTFILE\"\n  echo \"  bluetooth.service\" >> \"$CONFOUTPUTFILE\"\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n\n  echo \"package list exported successfully to $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\nfi\n\n# import packages if requested\nif [[ \"$IMPORTPACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORTFILE\" ]]; then\n    IMPORTFILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORTFILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORTFILE\"\n    exit 1\n  fi\n\n  echo \"installing packages from $IMPORTFILE...\"\n\n  # read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORTFILE\"\n\n  # install packages in batches to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"found ${#PACKAGES[@]} packages to install\"\n\n    # install in batches\n    BATCH_SIZE=30\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"all packages have been installed\"\n  else\n    echo \"no new packages found to install in $IMPORTFILE\"\n  fi\nfi\n\n# install packages from packages.conf\nif [[ \"$INSTALLPKGS\" == true ]]; then\n  # source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"error: packages.conf not found\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"starting system setup...\"\n\n  # update the system first\n  echo \"updating system...\"\n  sudo dnf upgrade -y\n\n  # install packages in batches\n  installpkgs() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"installing packages...\"\n\n    # install in batches to avoid command line length issues\n    local batchsize=20\n","suffix":"    local totalpackages=${#packages[@]}\n    local batches=$(( (totalpackages + batchsize - 1) / batchsize ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batchsize))\n      local end=$(( (i+1) * batchsize > totalpackages ? totalpackages : (i+1) * batchsize ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # install all packages\n  installpkgs \"${PACKAGES[@]}\"\n\n  # enable services\n  echo \"configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# install flatpaks\nif [[ \"$INSTALLFLATPAKS\" == true ]]; then\n  echo \"installing flatpaks...\"\n\n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALLFONTS\" == true ]]; then\n  echo \"installing fonts...\"\n\n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"complete!\"\n","path":"install.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["e6edcb65-5bbe-4765-8a5a-49e40b9fe173",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\n#------------------------------------------------------------------------------\n# Configuration variables\n#------------------------------------------------------------------------------\n\n# Command line flags\nINSTALLPKGS=false\nINSTALLFLATPAKS=false\nINSTALLFONTS=false\nEXPORTPACKAGES=false\nIMPORTPACKAGES=false\nIMPORTFILE=\"\"\n\n# Export file paths\nRPMOUTPUTFILE=\"./fedora-packages-rpm.txt\"\nCONFOUTPUTFILE=\"./packages-exported.conf\"\n\n# Batch sizes for package installation\nBATCH_SIZE=30\nSMALL_BATCH_SIZE=20\n\n# List of flatpaks to install\nFLATPAKS=(\n  \"app.zen_browser.zen\"\n)\n\n#------------------------------------------------------------------------------\n# Functions\n#------------------------------------------------------------------------------\n\n# Print the logo\nprintlogo() {\n    cat << \"EOF\"\n    ______\n   / ____/_  ___________  ____ _________\n  / /_  / / / / ___/ __ \\/ __ `/ ___/ _ \\ fedora system crafting tool\n / __/ / /_/ / /  / / / / /_/ / /__/  __/ original by: typecraft\n/_/    \\__,_/_/  /_/ /_/\\__,_/\\___/\\___/  fork by: ellipticobj\n\nEOF\n}\n\n# Show help message\nshowhelp() {\n  echo \"usage: $0 [OPTION]\"\n  echo \"options:\"\n  echo \"  -h, --help                 display this help message\"\n  echo \"  -a, --all                  install everything (default)\"\n  echo \"  -p, --packages             install packages from packages.conf\"\n  echo \"  -f, --flatpaks             install flatpaks\"\n  echo \"  -t, --fonts                install fonts\"\n  echo \"  -d, --download [FILENAME]  install packages from a file\"\n  echo \"  -e, --export               export currently installed packages to files\"\n  echo \"                             creates $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\n  echo \"  -c, --current              export and install currently installed packages\"\n  echo\n}\n\n# install everything if no args\nif [ $# -eq 0 ]; then\n  INSTALLPKGS=true\n  INSTALLFLATPAKS=true\n  INSTALLFONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      showhelp\n      exit 0\n      ;;\n    -a|--all)\n      INSTALLPKGS=true\n      INSTALLFLATPAKS=true\n      INSTALLFONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALLPKGS=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALLFLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALLFONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORTPACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORTPACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORTFILE=\"$2\"\n        shift\n      else\n        IMPORTFILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORTPACKAGES=true\n      IMPORTPACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"unknown option: $1\"\n      showhelp\n      exit 1\n      ;;\n  esac\ndone\n\n# clear screen and show logo\nprintlogo\n\n# exit on any error\nset -e\n\n# export packages if requested\nif [[ \"$EXPORTPACKAGES\" == true ]]; then\n  echo \"exporting currently installed packages...\"\n  echo \"exporting installed packages to $RPMOUTPUTFILE and $CONFOUTPUTFILE...\"\n\n  # export to rpm text format\n  echo \"# fedora packages installed on $(date)\" > \"$RPMOUTPUTFILE\"\n  echo \"# generated by furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"# https://github.com/ellipticobj/furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"\" >> \"$RPMOUTPUTFILE\"\n  echo \"# user-installed packages\" >> \"$RPMOUTPUTFILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$RPMOUTPUTFILE\"\n\n  # export to packages.conf format\n  echo \"# Fedora packages installed on $(date)\" > \"$CONFOUTPUTFILE\"\n  echo \"# Generated by Furnace\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# All packages to install\" >> \"$CONFOUTPUTFILE\"\n  echo \"PACKAGES=(\" >> \"$CONFOUTPUTFILE\"\n\n  # get the list of installed packages\n  rpm -qa --qf \"%{NAME}\\n\" | sort | while read -r package; do\n    echo \"  $package\" >> \"$CONFOUTPUTFILE\"\n  done\n\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# services\" >> \"$CONFOUTPUTFILE\"\n  echo \"SERVICES=(\" >> \"$CONFOUTPUTFILE\"\n  echo \"  NetworkManager.service\" >> \"$CONFOUTPUTFILE\"\n  echo \"  bluetooth.service\" >> \"$CONFOUTPUTFILE\"\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n\n  echo \"package list exported successfully to $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\nfi\n\n# import packages if requested\nif [[ \"$IMPORTPACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORTFILE\" ]]; then\n    IMPORTFILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORTFILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORTFILE\"\n    exit 1\n  fi\n\n  echo \"installing packages from $IMPORTFILE...\"\n\n  # read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORTFILE\"\n\n  # install packages in batches to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"found ${#PACKAGES[@]} packages to install\"\n\n    # install in batches\n    BATCH_SIZE=30\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"all packages have been installed\"\n  else\n    echo \"no new packages found to install in $IMPORTFILE\"\n  fi\nfi\n\n# install packages from packages.conf\nif [[ \"$INSTALLPKGS\" == true ]]; then\n  # source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"error: packages.conf not found\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"starting system setup...\"\n\n  # update the system first\n  echo \"updating system...\"\n  sudo dnf upgrade -y\n\n  # install packages in batches\n  installpkgs() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"installing packages...\"\n\n    # install in batches to avoid command line length issues\n    local batchsize=20\n","suffix":"    local totalpackages=${#packages[@]}\n    local batches=$(( (totalpackages + batchsize - 1) / batchsize ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batchsize))\n      local end=$(( (i+1) * batchsize > totalpackages ? totalpackages : (i+1) * batchsize ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # install all packages\n  installpkgs \"${PACKAGES[@]}\"\n\n  # enable services\n  echo \"configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# install flatpaks\nif [[ \"$INSTALLFLATPAKS\" == true ]]; then\n  echo \"installing flatpaks...\"\n\n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALLFONTS\" == true ]]; then\n  echo \"installing fonts...\"\n\n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"complete!\"\n","path":"install.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["1b517cfe-99b9-432f-aabc-0751493096d7",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\n#------------------------------------------------------------------------------\n# Configuration variables\n#------------------------------------------------------------------------------\n\n# Command line flags\nINSTALLPKGS=false\nINSTALLFLATPAKS=false\nINSTALLFONTS=false\nEXPORTPACKAGES=false\nIMPORTPACKAGES=false\nIMPORTFILE=\"\"\n\n# Export file paths\nRPMOUTPUTFILE=\"./fedora-packages-rpm.txt\"\nCONFOUTPUTFILE=\"./packages-exported.conf\"\n\n# Batch sizes for package installation\nBATCH_SIZE=30\nSMALL_BATCH_SIZE=20\n\n# List of flatpaks to install\nFLATPAKS=(\n  \"app.zen_browser.zen\"\n)\n\n#------------------------------------------------------------------------------\n# Functions\n#------------------------------------------------------------------------------\n\n# Print the logo\nprintlogo() {\n    cat << \"EOF\"\n    ______\n   / ____/_  ___________  ____ _________\n  / /_  / / / / ___/ __ \\/ __ `/ ___/ _ \\ fedora system crafting tool\n / __/ / /_/ / /  / / / / /_/ / /__/  __/ original by: typecraft\n/_/    \\__,_/_/  /_/ /_/\\__,_/\\___/\\___/  fork by: ellipticobj\n\nEOF\n}\n\n# Show help message\nshowhelp() {\n  echo \"usage: $0 [OPTION]\"\n  echo \"options:\"\n  echo \"  -h, --help                 display this help message\"\n  echo \"  -a, --all                  install everything (default)\"\n  echo \"  -p, --packages             install packages from packages.conf\"\n  echo \"  -f, --flatpaks             install flatpaks\"\n  echo \"  -t, --fonts                install fonts\"\n  echo \"  -d, --download [FILENAME]  install packages from a file\"\n  echo \"  -e, --export               export currently installed packages to files\"\n  echo \"                             creates $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\n  echo \"  -c, --current              export and install currently installed packages\"\n  echo\n}\n\n# install everything if no args\nif [ $# -eq 0 ]; then\n  INSTALLPKGS=true\n  INSTALLFLATPAKS=true\n  INSTALLFONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      showhelp\n      exit 0\n      ;;\n    -a|--all)\n      INSTALLPKGS=true\n      INSTALLFLATPAKS=true\n      INSTALLFONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALLPKGS=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALLFLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALLFONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORTPACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORTPACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORTFILE=\"$2\"\n        shift\n      else\n        IMPORTFILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORTPACKAGES=true\n      IMPORTPACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"unknown option: $1\"\n      showhelp\n      exit 1\n      ;;\n  esac\ndone\n\n# clear screen and show logo\nprintlogo\n\n# exit on any error\nset -e\n\n# export packages if requested\nif [[ \"$EXPORTPACKAGES\" == true ]]; then\n  echo \"exporting currently installed packages...\"\n  echo \"exporting installed packages to $RPMOUTPUTFILE and $CONFOUTPUTFILE...\"\n\n  # export to rpm text format\n  echo \"# fedora packages installed on $(date)\" > \"$RPMOUTPUTFILE\"\n  echo \"# generated by furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"# https://github.com/ellipticobj/furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"\" >> \"$RPMOUTPUTFILE\"\n  echo \"# user-installed packages\" >> \"$RPMOUTPUTFILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$RPMOUTPUTFILE\"\n\n  # export to packages.conf format\n  echo \"# Fedora packages installed on $(date)\" > \"$CONFOUTPUTFILE\"\n  echo \"# Generated by Furnace\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# All packages to install\" >> \"$CONFOUTPUTFILE\"\n  echo \"PACKAGES=(\" >> \"$CONFOUTPUTFILE\"\n\n  # get the list of installed packages\n  rpm -qa --qf \"%{NAME}\\n\" | sort | while read -r package; do\n    echo \"  $package\" >> \"$CONFOUTPUTFILE\"\n  done\n\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# services\" >> \"$CONFOUTPUTFILE\"\n  echo \"SERVICES=(\" >> \"$CONFOUTPUTFILE\"\n  echo \"  NetworkManager.service\" >> \"$CONFOUTPUTFILE\"\n  echo \"  bluetooth.service\" >> \"$CONFOUTPUTFILE\"\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n\n  echo \"package list exported successfully to $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\nfi\n\n# import packages if requested\nif [[ \"$IMPORTPACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORTFILE\" ]]; then\n    IMPORTFILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORTFILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORTFILE\"\n    exit 1\n  fi\n\n  echo \"installing packages from $IMPORTFILE...\"\n\n  # read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORTFILE\"\n\n  # install packages in batches to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"found ${#PACKAGES[@]} packages to install\"\n\n    # install in batches\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"all packages have been installed\"\n  else\n    echo \"no new packages found to install in $IMPORTFILE\"\n  fi\nfi\n\n# install packages from packages.conf\nif [[ \"$INSTALLPKGS\" == true ]]; then\n  # source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"error: packages.conf not found\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"starting system setup...\"\n\n  # update the system first\n  echo \"updating system...\"\n  sudo dnf upgrade -y\n\n  # install packages in batches\n  installpkgs() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"installing packages...\"\n\n    # install in batches to avoid command line length issues\n    local batchsize=20\n","suffix":"    local totalpackages=${#packages[@]}\n    local batches=$(( (totalpackages + batchsize - 1) / batchsize ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batchsize))\n      local end=$(( (i+1) * batchsize > totalpackages ? totalpackages : (i+1) * batchsize ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # install all packages\n  installpkgs \"${PACKAGES[@]}\"\n\n  # enable services\n  echo \"configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# install flatpaks\nif [[ \"$INSTALLFLATPAKS\" == true ]]; then\n  echo \"installing flatpaks...\"\n\n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALLFONTS\" == true ]]; then\n  echo \"installing fonts...\"\n\n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"complete!\"\n","path":"install.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["4372d874-359f-4f0c-b14b-f7349a8c3603",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\n#------------------------------------------------------------------------------\n# Configuration variables\n#------------------------------------------------------------------------------\n\n# Command line flags\nINSTALLPKGS=false\nINSTALLFLATPAKS=false\nINSTALLFONTS=false\nEXPORTPACKAGES=false\nIMPORTPACKAGES=false\nIMPORTFILE=\"\"\n\n# Export file paths\nRPMOUTPUTFILE=\"./fedora-packages-rpm.txt\"\nCONFOUTPUTFILE=\"./packages-exported.conf\"\n\n# Batch sizes for package installation\nBATCH_SIZE=30\nSMALL_BATCH_SIZE=20\n\n# List of flatpaks to install\nFLATPAKS=(\n  \"app.zen_browser.zen\"\n)\n\n#------------------------------------------------------------------------------\n# Functions\n#------------------------------------------------------------------------------\n\n# Print the logo\nprintlogo() {\n    cat << \"EOF\"\n    ______\n   / ____/_  ___________  ____ _________\n  / /_  / / / / ___/ __ \\/ __ `/ ___/ _ \\ fedora system crafting tool\n / __/ / /_/ / /  / / / / /_/ / /__/  __/ original by: typecraft\n/_/    \\__,_/_/  /_/ /_/\\__,_/\\___/\\___/  fork by: ellipticobj\n\nEOF\n}\n\n# Show help message\nshowhelp() {\n  echo \"usage: $0 [OPTION]\"\n  echo \"options:\"\n  echo \"  -h, --help                 display this help message\"\n  echo \"  -a, --all                  install everything (default)\"\n  echo \"  -p, --packages             install packages from packages.conf\"\n  echo \"  -f, --flatpaks             install flatpaks\"\n  echo \"  -t, --fonts                install fonts\"\n  echo \"  -d, --download [FILENAME]  install packages from a file\"\n  echo \"  -e, --export               export currently installed packages to files\"\n  echo \"                             creates $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\n  echo \"  -c, --current              export and install currently installed packages\"\n  echo\n}\n\n# install everything if no args\nif [ $# -eq 0 ]; then\n  INSTALLPKGS=true\n  INSTALLFLATPAKS=true\n  INSTALLFONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      showhelp\n      exit 0\n      ;;\n    -a|--all)\n      INSTALLPKGS=true\n      INSTALLFLATPAKS=true\n      INSTALLFONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALLPKGS=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALLFLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALLFONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORTPACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORTPACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORTFILE=\"$2\"\n        shift\n      else\n        IMPORTFILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORTPACKAGES=true\n      IMPORTPACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"unknown option: $1\"\n      showhelp\n      exit 1\n      ;;\n  esac\ndone\n\n# clear screen and show logo\nprintlogo\n\n# exit on any error\nset -e\n\n# export packages if requested\nif [[ \"$EXPORTPACKAGES\" == true ]]; then\n  echo \"exporting currently installed packages...\"\n  echo \"exporting installed packages to $RPMOUTPUTFILE and $CONFOUTPUTFILE...\"\n\n  # export to rpm text format\n  echo \"# fedora packages installed on $(date)\" > \"$RPMOUTPUTFILE\"\n  echo \"# generated by furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"# https://github.com/ellipticobj/furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"\" >> \"$RPMOUTPUTFILE\"\n  echo \"# user-installed packages\" >> \"$RPMOUTPUTFILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$RPMOUTPUTFILE\"\n\n  # export to packages.conf format\n  echo \"# Fedora packages installed on $(date)\" > \"$CONFOUTPUTFILE\"\n  echo \"# Generated by Furnace\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# All packages to install\" >> \"$CONFOUTPUTFILE\"\n  echo \"PACKAGES=(\" >> \"$CONFOUTPUTFILE\"\n\n  # get the list of installed packages\n  rpm -qa --qf \"%{NAME}\\n\" | sort | while read -r package; do\n    echo \"  $package\" >> \"$CONFOUTPUTFILE\"\n  done\n\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# services\" >> \"$CONFOUTPUTFILE\"\n  echo \"SERVICES=(\" >> \"$CONFOUTPUTFILE\"\n  echo \"  NetworkManager.service\" >> \"$CONFOUTPUTFILE\"\n  echo \"  bluetooth.service\" >> \"$CONFOUTPUTFILE\"\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n\n  echo \"package list exported successfully to $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\nfi\n\n# import packages if requested\nif [[ \"$IMPORTPACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORTFILE\" ]]; then\n    IMPORTFILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORTFILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORTFILE\"\n    exit 1\n  fi\n\n  echo \"installing packages from $IMPORTFILE...\"\n\n  # read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORTFILE\"\n\n  # install packages in batches to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"found ${#PACKAGES[@]} packages to install\"\n\n    # install in batches\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"all packages have been installed\"\n  else\n    echo \"no new packages found to install in $IMPORTFILE\"\n  fi\nfi\n\n# install packages from packages.conf\nif [[ \"$INSTALLPKGS\" == true ]]; then\n  # source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"error: packages.conf not found\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"starting system setup...\"\n\n  # update the system first\n  echo \"updating system...\"\n  sudo dnf upgrade -y\n\n  # install packages in batches\n  installpkgs() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"installing packages...\"\n\n    # install in batches to avoid command line length issues\n    local totalpackages=${#packages[@]}\n","suffix":"    local batches=$(( (totalpackages + SMALL_BATCH_SIZE - 1) / SMALL_BATCH_SIZE ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batchsize))\n      local end=$(( (i+1) * batchsize > totalpackages ? totalpackages : (i+1) * batchsize ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # install all packages\n  installpkgs \"${PACKAGES[@]}\"\n\n  # enable services\n  echo \"configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# install flatpaks\nif [[ \"$INSTALLFLATPAKS\" == true ]]; then\n  echo \"installing flatpaks...\"\n\n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALLFONTS\" == true ]]; then\n  echo \"installing fonts...\"\n\n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"complete!\"\n","path":"install.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["bea28758-644e-4454-a462-c616eafc6138",{"value":{"selectedCode":"","prefix":"# All packages to install\nPACKAGES=(\n  # utils\n  btop\n  lazygit\n  lazydocker\n  stow\n  fzf\n  fastfetch\n  zip\n  unzip\n  wget\n  curl\n  epiphany\n\n  # development tools\n  vim\n  bat\n  neovim\n  starship\n  tmux\n  git\n  alacritty\n  PackageKit\n  python3\n  python-as-python3\n  python3-devel\n  python3-pip\n\n  # system\n  baobab\n  binwalk\n  blueman\n  bluez\n  bluez-cups\n  bluez-tools\n  dnfdragora\n  gnome-system-monitor\n  gnome-weather\n  gnome-text-editor\n  cmake\n  typescript\n  nodejs-npm\n  meson\n  gjs\n  gjs-devel\n  gobject-introspection\n  gobject-introspection-devel\n  gtk3-devel\n  gtk-layer-shell\n  upower\n  NetworkManager\n  pam-devel\n  pulseaudio-libs-devel\n  libdbusmenu-gtk3\n  libsoup3\n\n  # desktop environment\n  hypr\n  hyprctl\n  hypridle\n  hyprlock\n  qt5ct\n  qt6ct\n  rofi-wayland\n  swaync\n  waybar\n  bc\n  findutils\n  gawk\n  grim\n  gvfs\n  gvfs-mtp\n  hyprpolkitagent\n  ImageMajick\n  inxi\n  jq\n  kvantum\n  network-manager-applet\n  openssl\n  pamixer\n  pavucontrol\n  pipewire-alsa\n  pipewire-utils\n  playerctl\n  python3-requests\n  python3-pip\n  python3-pyquery\n  python-as-python3\n  qt6-qtsvg\n  slurp\n  swappy\n  wget2\n  wl-clipboard\n  wlogout\n  xdg-user-dirs\n  xdg-utils\n  yad\n  brightnessctl\n  ioupe\n  mousepad\n  mpv\n  mpv-mpris\n  nvtop\n  qalculate\n  nwg-displays\n  cliphist\n  nwg-look\n  SwayNotificationCenter\n  pamixer\n  swww\n  wallust\n\n  # medua \n","suffix":"  vlc\n  flameshot\n  gimp\n  krita\n  kicad\n\n  # Fonts\n  aajohan-comfortaa-fonts\n)\n\n# services\nSERVICES=(\n  NetworkManager.service\n  bluetooth.service\n)\n","path":"packages.conf","language":"properties","prefixBegin":0,"suffixEnd":0}}],["19311d66-c198-4e78-a240-c15379bc36d2",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\n#------------------------------------------------------------------------------\n# Configuration variables\n#------------------------------------------------------------------------------\n\n# Command line flags\nINSTALLPKGS=false\nINSTALLFLATPAKS=false\nINSTALLFONTS=false\nEXPORTPACKAGES=false\nIMPORTPACKAGES=false\nIMPORTFILE=\"\"\n\n# Export file paths\nRPMOUTPUTFILE=\"./fedora-packages-rpm.txt\"\nCONFOUTPUTFILE=\"./packages-exported.conf\"\n\n# Batch sizes for package installation\nBATCH_SIZE=30\nSMALL_BATCH_SIZE=20\n\n# List of flatpaks to install\nFLATPAKS=(\n  \"app.zen_browser.zen\"\n)\n\n# Font URLs\nCARTOGRAPH_FONT_URL=\"https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip\"\nCARTOGRAPH_FONT_DIR=\"$HOME/.local/share/fonts/CartographCF/\"\n\n#------------------------------------------------------------------------------\n# Functions\n#------------------------------------------------------------------------------\n\n# Print the logo\nprintlogo() {\n    cat << \"EOF\"\n    ______\n   / ____/_  ___________  ____ _________\n  / /_  / / / / ___/ __ \\/ __ `/ ___/ _ \\ fedora system crafting tool\n / __/ / /_/ / /  / / / / /_/ / /__/  __/ original by: typecraft\n/_/    \\__,_/_/  /_/ /_/\\__,_/\\___/\\___/  fork by: ellipticobj\n\nEOF\n}\n\n# Show help message\nshowhelp() {\n  echo \"usage: $0 [OPTION]\"\n  echo \"options:\"\n  echo \"  -h, --help                 display this help message\"\n  echo \"  -a, --all                  install everything (default)\"\n  echo \"  -p, --packages             install packages from packages.conf\"\n  echo \"  -f, --flatpaks             install flatpaks\"\n  echo \"  -t, --fonts                install fonts\"\n  echo \"  -d, --download [FILENAME]  install packages from a file\"\n  echo \"  -e, --export               export currently installed packages to files\"\n  echo \"                             creates $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\n  echo \"  -c, --current              export and install currently installed packages\"\n  echo\n}\n\n# install everything if no args\nif [ $# -eq 0 ]; then\n  INSTALLPKGS=true\n  INSTALLFLATPAKS=true\n  INSTALLFONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      showhelp\n      exit 0\n      ;;\n    -a|--all)\n      INSTALLPKGS=true\n      INSTALLFLATPAKS=true\n      INSTALLFONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALLPKGS=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALLFLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALLFONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORTPACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORTPACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORTFILE=\"$2\"\n        shift\n      else\n        IMPORTFILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORTPACKAGES=true\n      IMPORTPACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"unknown option: $1\"\n      showhelp\n      exit 1\n      ;;\n  esac\ndone\n\n# clear screen and show logo\nprintlogo\n\n# exit on any error\nset -e\n\n# export packages if requested\nif [[ \"$EXPORTPACKAGES\" == true ]]; then\n  echo \"exporting currently installed packages...\"\n  echo \"exporting installed packages to $RPMOUTPUTFILE and $CONFOUTPUTFILE...\"\n\n  # export to rpm text format\n  echo \"# fedora packages installed on $(date)\" > \"$RPMOUTPUTFILE\"\n  echo \"# generated by furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"# https://github.com/ellipticobj/furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"\" >> \"$RPMOUTPUTFILE\"\n  echo \"# user-installed packages\" >> \"$RPMOUTPUTFILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$RPMOUTPUTFILE\"\n\n  # export to packages.conf format\n  echo \"# Fedora packages installed on $(date)\" > \"$CONFOUTPUTFILE\"\n  echo \"# Generated by Furnace\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# All packages to install\" >> \"$CONFOUTPUTFILE\"\n  echo \"PACKAGES=(\" >> \"$CONFOUTPUTFILE\"\n\n  # get the list of installed packages\n  rpm -qa --qf \"%{NAME}\\n\" | sort | while read -r package; do\n    echo \"  $package\" >> \"$CONFOUTPUTFILE\"\n  done\n\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# services\" >> \"$CONFOUTPUTFILE\"\n  echo \"SERVICES=(\" >> \"$CONFOUTPUTFILE\"\n  echo \"  NetworkManager.service\" >> \"$CONFOUTPUTFILE\"\n  echo \"  bluetooth.service\" >> \"$CONFOUTPUTFILE\"\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n\n  echo \"package list exported successfully to $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\nfi\n\n# import packages if requested\nif [[ \"$IMPORTPACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORTFILE\" ]]; then\n    IMPORTFILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORTFILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORTFILE\"\n    exit 1\n  fi\n\n  echo \"installing packages from $IMPORTFILE...\"\n\n  # read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORTFILE\"\n\n  # install packages in batches to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"found ${#PACKAGES[@]} packages to install\"\n\n    # install in batches\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"all packages have been installed\"\n  else\n    echo \"no new packages found to install in $IMPORTFILE\"\n  fi\nfi\n\n# install packages from packages.conf\nif [[ \"$INSTALLPKGS\" == true ]]; then\n  # source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"error: packages.conf not found\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"starting system setup...\"\n\n  # update the system first\n  echo \"updating system...\"\n  sudo dnf upgrade -y\n\n  # install packages in batches\n  installpkgs() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"installing packages...\"\n\n    # install in batches to avoid command line length issues\n    local totalpackages=${#packages[@]}\n","suffix":"    local batches=$(( (totalpackages + SMALL_BATCH_SIZE - 1) / SMALL_BATCH_SIZE ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * SMALL_BATCH_SIZE))\n      local end=$(( (i+1) * SMALL_BATCH_SIZE > totalpackages ? totalpackages : (i+1) * SMALL_BATCH_SIZE ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # install all packages\n  installpkgs \"${PACKAGES[@]}\"\n\n  # enable services\n  echo \"configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# install flatpaks\nif [[ \"$INSTALLFLATPAKS\" == true ]]; then\n  echo \"installing flatpaks...\"\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALLFONTS\" == true ]]; then\n  echo \"installing fonts...\"\n\n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"complete!\"\n","path":"install.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}],["fd6c8e22-efae-4528-9216-d3da9e07e823",{"value":{"selectedCode":"","prefix":"#!/bin/bash\n\n#------------------------------------------------------------------------------\n# Configuration variables\n#------------------------------------------------------------------------------\n\n# Command line flags\nINSTALLPKGS=false\nINSTALLFLATPAKS=false\nINSTALLFONTS=false\nEXPORTPACKAGES=false\nIMPORTPACKAGES=false\nIMPORTFILE=\"\"\n\n# Export file paths\nRPMOUTPUTFILE=\"./fedora-packages-rpm.txt\"\nCONFOUTPUTFILE=\"./packages-exported.conf\"\n\n# Batch sizes for package installation\nBATCH_SIZE=30\nSMALL_BATCH_SIZE=20\n\n# List of flatpaks to install\nFLATPAKS=(\n  \"app.zen_browser.zen\"\n)\n\n# Fonts configuration\n# Base directory for all fonts\nFONTS_BASE_DIR=\"$HOME/.local/share/fonts\"\n\n# Declare associative array for fonts (name -> url)\ndeclare -A FONTS=(\n  [\"CartographCF\"]=\"https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip\"\n  [\"JetBrainsMono\"]=\"https://github.com/JetBrains/JetBrainsMono/releases/download/v2.304/JetBrainsMono-2.304.zip\"\n  [\"FiraCode\"]=\"https://github.com/tonsky/FiraCode/releases/download/6.2/Fira_Code_v6.2.zip\"\n)\n\n#------------------------------------------------------------------------------\n# Functions\n#------------------------------------------------------------------------------\n\n# Print the logo\nprintlogo() {\n    cat << \"EOF\"\n    ______\n   / ____/_  ___________  ____ _________\n  / /_  / / / / ___/ __ \\/ __ `/ ___/ _ \\ fedora system crafting tool\n / __/ / /_/ / /  / / / / /_/ / /__/  __/ original by: typecraft\n/_/    \\__,_/_/  /_/ /_/\\__,_/\\___/\\___/  fork by: ellipticobj\n\nEOF\n}\n\n# Show help message\nshowhelp() {\n  echo \"usage: $0 [OPTION]\"\n  echo \"options:\"\n  echo \"  -h, --help                 display this help message\"\n  echo \"  -a, --all                  install everything (default)\"\n  echo \"  -p, --packages             install packages from packages.conf\"\n  echo \"  -f, --flatpaks             install flatpaks\"\n  echo \"  -t, --fonts                install fonts\"\n  echo \"  -d, --download [FILENAME]  install packages from a file\"\n  echo \"  -e, --export               export currently installed packages to files\"\n  echo \"                             creates $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\n  echo \"  -c, --current              export and install currently installed packages\"\n  echo\n}\n\n# install everything if no args\nif [ $# -eq 0 ]; then\n  INSTALLPKGS=true\n  INSTALLFLATPAKS=true\n  INSTALLFONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      showhelp\n      exit 0\n      ;;\n    -a|--all)\n      INSTALLPKGS=true\n      INSTALLFLATPAKS=true\n      INSTALLFONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALLPKGS=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALLFLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALLFONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORTPACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORTPACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORTFILE=\"$2\"\n        shift\n      else\n        IMPORTFILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORTPACKAGES=true\n      IMPORTPACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"unknown option: $1\"\n      showhelp\n      exit 1\n      ;;\n  esac\ndone\n\n# clear screen and show logo\nprintlogo\n\n# exit on any error\nset -e\n\n# export packages if requested\nif [[ \"$EXPORTPACKAGES\" == true ]]; then\n  echo \"exporting currently installed packages...\"\n  echo \"exporting installed packages to $RPMOUTPUTFILE and $CONFOUTPUTFILE...\"\n\n  # export to rpm text format\n  echo \"# fedora packages installed on $(date)\" > \"$RPMOUTPUTFILE\"\n  echo \"# generated by furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"# https://github.com/ellipticobj/furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"\" >> \"$RPMOUTPUTFILE\"\n  echo \"# user-installed packages\" >> \"$RPMOUTPUTFILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$RPMOUTPUTFILE\"\n\n  # export to packages.conf format\n  echo \"# Fedora packages installed on $(date)\" > \"$CONFOUTPUTFILE\"\n  echo \"# Generated by Furnace\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# All packages to install\" >> \"$CONFOUTPUTFILE\"\n  echo \"PACKAGES=(\" >> \"$CONFOUTPUTFILE\"\n\n  # get the list of installed packages\n  rpm -qa --qf \"%{NAME}\\n\" | sort | while read -r package; do\n    echo \"  $package\" >> \"$CONFOUTPUTFILE\"\n  done\n\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# services\" >> \"$CONFOUTPUTFILE\"\n  echo \"SERVICES=(\" >> \"$CONFOUTPUTFILE\"\n  echo \"  NetworkManager.service\" >> \"$CONFOUTPUTFILE\"\n  echo \"  bluetooth.service\" >> \"$CONFOUTPUTFILE\"\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n\n  echo \"package list exported successfully to $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\nfi\n\n# import packages if requested\nif [[ \"$IMPORTPACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORTFILE\" ]]; then\n    IMPORTFILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORTFILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORTFILE\"\n    exit 1\n  fi\n\n  echo \"installing packages from $IMPORTFILE...\"\n\n  # read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORTFILE\"\n\n  # install packages in batches to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"found ${#PACKAGES[@]} packages to install\"\n\n    # install in batches\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"all packages have been installed\"\n  else\n    echo \"no new packages found to install in $IMPORTFILE\"\n  fi\nfi\n\n# install packages from packages.conf\nif [[ \"$INSTALLPKGS\" == true ]]; then\n  # source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"error: packages.conf not found\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"starting system setup...\"\n\n  # update the system first\n  echo \"updating system...\"\n  sudo dnf upgrade -y\n\n  # install packages in batches\n  installpkgs() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"installing packages...\"\n\n    # install in batches to avoid command line length issues\n    local totalpackages=${#packages[@]}\n","suffix":"    local batches=$(( (totalpackages + SMALL_BATCH_SIZE - 1) / SMALL_BATCH_SIZE ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * SMALL_BATCH_SIZE))\n      local end=$(( (i+1) * SMALL_BATCH_SIZE > totalpackages ? totalpackages : (i+1) * SMALL_BATCH_SIZE ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # install all packages\n  installpkgs \"${PACKAGES[@]}\"\n\n  # enable services\n  echo \"configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# install flatpaks\nif [[ \"$INSTALLFLATPAKS\" == true ]]; then\n  echo \"installing flatpaks...\"\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALLFONTS\" == true ]]; then\n  echo \"installing fonts...\"\n\n  if wget -q \"$CARTOGRAPH_FONT_URL\"; then\n    mkdir -p \"$CARTOGRAPH_FONT_DIR\" && unzip -o -q \"main.zip\" -d \"$CARTOGRAPH_FONT_DIR\" && echo \"cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"complete!\"\n","path":"install.sh","language":"shellscript","prefixBegin":0,"suffixEnd":0}}]]