{"path":{"rootPath":"/home/luna/repos/furnace","relPath":"install.sh"},"originalCode":"#!/bin/bash\n\n# Print the logo\nprintlogo() {\n    cat << \"EOF\"\n    ______                _ __    __\n   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\  fedora system crafting tool\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  original by: typecraft\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   fork by: ellipticobj\n\nEOF\n}\n\n# function to display help\nshow_help() {\n  echo \"usage: $0 [OPTION]\"\n  echo \"options:\"\n  echo \"  -h, --help                 display this help message\"\n  echo \"  -a, --all                  install everything (default)\"\n  echo \"  -p, --packages             install packages from packages.conf\"\n  echo \"  -f, --flatpaks             install flatpaks\"\n  echo \"  -t, --fonts                install fonts\"\n  echo \"  -d, --download [FILENAME]  install packages from a file\"\n  echo \"  -e, --export               export currently installed packages to files\"\n  echo \"                             creates fedora-packages-rpm.txt and packages-exported.conf\"\n  echo \"  -c, --current              export and install currently installed packages\"\n  echo\n}\n\nINSTALLPKGS=false\nINSTALLFLATPAKS=false\nINSTALLFONTS=false\nEXPORTPACKAGES=false\nIMPORTPACKAGES=false\nIMPORTFILE=\"\"\n\n# install everything if no args\nif [ $# -eq 0 ]; then\n  INSTALLPKGS=true\n  INSTALLFLATPAKS=true\n  INSTALLFONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -a|--all)\n      INSTALLPKGS=true\n      INSTALLFLATPAKS=true\n      INSTALLFONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALLPKGS=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALLFLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALLFONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORTPACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORTPACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORTFILE=\"$2\"\n        shift\n      else\n        IMPORTFILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORTPACKAGES=true\n      IMPORTPACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"unknown option: $1\"\n      show_help\n      exit 1\n      ;;\n  esac\ndone\n\n# clear screen and show logo\nprintlogo\n\n# exit on any error\nset -e\n\n# export packages if requested\nif [[ \"$EXPORTPACKAGES\" == true ]]; then\n  echo \"exporting currently installed packages...\"\n\n  # export to both formats\n  RPMOUTPUTFILE=\"./fedora-packages-rpm.txt\"\n  CONFOUTPUTFILE=\"./packages-exported.conf\"\n\n  echo \"exporting installed packages to $RPMOUTPUTFILE and $CONFOUTPUTFILE...\"\n\n  # export to rpm text format\n  echo \"# fedora packages installed on $(date)\" > \"$RPMOUTPUTFILE\"\n  echo \"# generated by furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"# https://github.com/ellipticobj/furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"\" >> \"$RPMOUTPUTFILE\"\n  echo \"# user-installed packages\" >> \"$RPMOUTPUTFILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$RPMOUTPUTFILE\"\n\n  # export to packages.conf format\n  echo \"# Fedora packages installed on $(date)\" > \"$CONFOUTPUTFILE\"\n  echo \"# Generated by Furnace\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# All packages to install\" >> \"$CONFOUTPUTFILE\"\n  echo \"PACKAGES=(\" >> \"$CONFOUTPUTFILE\"\n\n  # get the list of installed packages\n  rpm -qa --qf \"%{NAME}\\n\" | sort | while read -r package; do\n    echo \"  $package\" >> \"$CONFOUTPUTFILE\"\n  done\n\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# services\" >> \"$CONFOUTPUTFILE\"\n  echo \"SERVICES=(\" >> \"$CONFOUTPUTFILE\"\n  echo \"  NetworkManager.service\" >> \"$CONFOUTPUTFILE\"\n  echo \"  bluetooth.service\" >> \"$CONFOUTPUTFILE\"\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n\n  echo \"package list exported successfully to $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\nfi\n\n# import packages if requested\nif [[ \"$IMPORTPACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORTFILE\" ]]; then\n    IMPORTFILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORTFILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORTFILE\"\n    exit 1\n  fi\n\n  echo \"installing packages from $IMPORTFILE...\"\n\n  # Read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # Skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # Check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORTFILE\"\n\n  # Install packages in batches of 50 to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"found ${#PACKAGES[@]} packages to install\"\n\n    # Install in batches of 50\n    BATCH_SIZE=50\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"all packages have been installed\"\n  else\n    echo \"no new packages found to install in $IMPORTFILE\"\n  fi\nfi\n\n# Install packages from packages.conf\nif [[ \"$INSTALLPKGS\" == true ]]; then\n  # Source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"error: packages.conf not found\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"starting system setup...\"\n\n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n\n  # Function to install packages in batches\n  installpkgs() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"installing packages...\"\n\n    # Install in batches to avoid command line length issues\n    local batchsize=20\n    local totalpackages=${#packages[@]}\n    local batches=$(( (totalpackages + batchsize - 1) / batchsize ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batchsize))\n      local end=$(( (i+1) * batchsize > totalpackages ? totalpackages : (i+1) * batchsize ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # install all packages\n  installpkgs \"${PACKAGES[@]}\"\n\n  # enable services\n  echo \"configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# install flatpaks\nif [[ \"$INSTALLFLATPAKS\" == true ]]; then\n  echo \"installing flatpaks...\"\n\n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALLFONTS\" == true ]]; then\n  echo \"installing fonts...\"\n\n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"complete!\"\n","modifiedCode":"#!/bin/bash\n\nprintlogo() {\n    cat << \"EOF\"\n    ______                               \n   / ____/_  ___________  ____ _________ \n  / /_  / / / / ___/ __ \\/ __ `/ ___/ _ \\ fedora system crafting tool\n / __/ / /_/ / /  / / / / /_/ / /__/  __/ original by: typecraft\n/_/    \\__,_/_/  /_/ /_/\\__,_/\\___/\\___/  fork by: ellipticobj\n\nEOF\n}\n\nshowhelp() {\n  echo \"usage: $0 [OPTION]\"\n  echo \"options:\"\n  echo \"  -h, --help                 display this help message\"\n  echo \"  -a, --all                  install everything (default)\"\n  echo \"  -p, --packages             install packages from packages.conf\"\n  echo \"  -f, --flatpaks             install flatpaks\"\n  echo \"  -t, --fonts                install fonts\"\n  echo \"  -d, --download [FILENAME]  install packages from a file\"\n  echo \"  -e, --export               export currently installed packages to files\"\n  echo \"                             creates fedora-packages-rpm.txt and packages-exported.conf\"\n  echo \"  -c, --current              export and install currently installed packages\"\n  echo\n}\n\nINSTALLPKGS=false\nINSTALLFLATPAKS=false\nINSTALLFONTS=false\nEXPORTPACKAGES=false\nIMPORTPACKAGES=false\nIMPORTFILE=\"\"\n\n# install everything if no args\nif [ $# -eq 0 ]; then\n  INSTALLPKGS=true\n  INSTALLFLATPAKS=true\n  INSTALLFONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      showhelp\n      exit 0\n      ;;\n    -a|--all)\n      INSTALLPKGS=true\n      INSTALLFLATPAKS=true\n      INSTALLFONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALLPKGS=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALLFLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALLFONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORTPACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORTPACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORTFILE=\"$2\"\n        shift\n      else\n        IMPORTFILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORTPACKAGES=true\n      IMPORTPACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"unknown option: $1\"\n      showhelp\n      exit 1\n      ;;\n  esac\ndone\n\n# clear screen and show logo\nprintlogo\n\n# exit on any error\nset -e\n\n# export packages if requested\nif [[ \"$EXPORTPACKAGES\" == true ]]; then\n  echo \"exporting currently installed packages...\"\n\n  # export to both formats\n  RPMOUTPUTFILE=\"./fedora-packages-rpm.txt\"\n  CONFOUTPUTFILE=\"./packages-exported.conf\"\n\n  echo \"exporting installed packages to $RPMOUTPUTFILE and $CONFOUTPUTFILE...\"\n\n  # export to rpm text format\n  echo \"# fedora packages installed on $(date)\" > \"$RPMOUTPUTFILE\"\n  echo \"# generated by furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"# https://github.com/ellipticobj/furnace\" >> \"$RPMOUTPUTFILE\"\n  echo \"\" >> \"$RPMOUTPUTFILE\"\n  echo \"# user-installed packages\" >> \"$RPMOUTPUTFILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$RPMOUTPUTFILE\"\n\n  # export to packages.conf format\n  echo \"# Fedora packages installed on $(date)\" > \"$CONFOUTPUTFILE\"\n  echo \"# Generated by Furnace\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# All packages to install\" >> \"$CONFOUTPUTFILE\"\n  echo \"PACKAGES=(\" >> \"$CONFOUTPUTFILE\"\n\n  # get the list of installed packages\n  rpm -qa --qf \"%{NAME}\\n\" | sort | while read -r package; do\n    echo \"  $package\" >> \"$CONFOUTPUTFILE\"\n  done\n\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n  echo \"\" >> \"$CONFOUTPUTFILE\"\n  echo \"# services\" >> \"$CONFOUTPUTFILE\"\n  echo \"SERVICES=(\" >> \"$CONFOUTPUTFILE\"\n  echo \"  NetworkManager.service\" >> \"$CONFOUTPUTFILE\"\n  echo \"  bluetooth.service\" >> \"$CONFOUTPUTFILE\"\n  echo \")\" >> \"$CONFOUTPUTFILE\"\n\n  echo \"package list exported successfully to $RPMOUTPUTFILE and $CONFOUTPUTFILE\"\nfi\n\n# import packages if requested\nif [[ \"$IMPORTPACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORTFILE\" ]]; then\n    IMPORTFILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORTFILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORTFILE\"\n    exit 1\n  fi\n\n  echo \"installing packages from $IMPORTFILE...\"\n\n  # read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORTFILE\"\n\n  # install packages in batches to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"found ${#PACKAGES[@]} packages to install\"\n\n    # install in batches\n    BATCH_SIZE=30\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"all packages have been installed\"\n  else\n    echo \"no new packages found to install in $IMPORTFILE\"\n  fi\nfi\n\n# install packages from packages.conf\nif [[ \"$INSTALLPKGS\" == true ]]; then\n  # source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"error: packages.conf not found\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"starting system setup...\"\n\n  # update the system first\n  echo \"updating system...\"\n  sudo dnf upgrade -y\n\n  # install packages in batches\n  installpkgs() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"installing packages...\"\n\n    # install in batches to avoid command line length issues\n    local batchsize=20\n    local totalpackages=${#packages[@]}\n    local batches=$(( (totalpackages + batchsize - 1) / batchsize ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batchsize))\n      local end=$(( (i+1) * batchsize > totalpackages ? totalpackages : (i+1) * batchsize ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # install all packages\n  installpkgs \"${PACKAGES[@]}\"\n\n  # enable services\n  echo \"configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# install flatpaks\nif [[ \"$INSTALLFLATPAKS\" == true ]]; then\n  echo \"installing flatpaks...\"\n\n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALLFONTS\" == true ]]; then\n  echo \"installing fonts...\"\n\n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"complete!\"\n"}