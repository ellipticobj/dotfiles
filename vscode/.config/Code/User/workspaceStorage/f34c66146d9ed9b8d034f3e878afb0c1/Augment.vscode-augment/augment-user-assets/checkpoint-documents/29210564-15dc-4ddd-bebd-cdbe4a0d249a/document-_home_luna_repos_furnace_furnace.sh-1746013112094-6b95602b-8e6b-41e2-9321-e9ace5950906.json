{"path":{"rootPath":"/home/luna/repos/furnace","relPath":"furnace.sh"},"originalCode":"#!/bin/bash\n\n# Print the logo\nprint_logo() {\n    cat << \"EOF\"\n    ______                _ __    __\n   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  Fedora System Crafting Tool\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   by: typecraft\n\nEOF\n}\n\n# Function to display help\nshow_help() {\n  echo \"Usage: $0 [OPTION]\"\n  echo \"Options:\"\n  echo \"  -h, --help                 Display this help message\"\n  echo \"  -a, --all                  Install everything (default)\"\n  echo \"  -p, --packages             Install packages from packages.conf\"\n  echo \"  -f, --flatpaks             Install flatpaks\"\n  echo \"  -t, --fonts                Install fonts\"\n  echo \"  -d, --download [FILENAME]  Install packages from a file\"\n  echo \"                             Default: fedora-packages-rpm.txt\"\n  echo \"  -e, --export               Export currently installed packages to a file\"\n  echo \"                             Creates fedora-packages-rpm.txt\"\n  echo \"  -c, --current              Export and install currently installed packages\"\n  echo\n}\n\n# Parse command line arguments\nINSTALL_PACKAGES=false\nINSTALL_FLATPAKS=false\nINSTALL_FONTS=false\nEXPORT_PACKAGES=false\nIMPORT_PACKAGES=false\nIMPORT_FILE=\"\"\n\n# If no arguments, install everything\nif [ $# -eq 0 ]; then\n  INSTALL_PACKAGES=true\n  INSTALL_FLATPAKS=true\n  INSTALL_FONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -a|--all)\n      INSTALL_PACKAGES=true\n      INSTALL_FLATPAKS=true\n      INSTALL_FONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALL_PACKAGES=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALL_FLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALL_FONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORT_PACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORT_PACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORT_FILE=\"$2\"\n        shift\n      else\n        IMPORT_FILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORT_PACKAGES=true\n      IMPORT_PACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"Unknown option: $1\"\n      show_help\n      exit 1\n      ;;\n  esac\ndone\n\n# Clear screen and show logo\nclear\nprint_logo\n\n# Exit on any error\nset -e\n\n# Export packages if requested\nif [[ \"$EXPORT_PACKAGES\" == true ]]; then\n  echo \"Exporting currently installed packages...\"\n\n  OUTPUT_FILE=\"./fedora-packages-rpm.txt\"\n\n  echo \"Exporting installed packages to $OUTPUT_FILE...\"\n\n  # Export header\n  echo \"# Fedora packages installed on $(date)\" > \"$OUTPUT_FILE\"\n  echo \"# Generated by Furnace\" >> \"$OUTPUT_FILE\"\n  echo \"\" >> \"$OUTPUT_FILE\"\n\n  # Export user-installed packages\n  echo \"# User-installed packages\" >> \"$OUTPUT_FILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$OUTPUT_FILE\"\n\n  echo \"Package list exported successfully to $OUTPUT_FILE\"\nfi\n\n# Import packages if requested\nif [[ \"$IMPORT_PACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORT_FILE\" ]]; then\n    IMPORT_FILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORT_FILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORT_FILE\"\n    exit 1\n  fi\n\n  echo \"Installing packages from $IMPORT_FILE...\"\n\n  # Read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # Skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # Check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORT_FILE\"\n\n  # Install packages in batches of 50 to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"Found ${#PACKAGES[@]} packages to install\"\n\n    # Install in batches of 50\n    BATCH_SIZE=50\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"All packages have been installed!\"\n  else\n    echo \"No new packages found to install in $IMPORT_FILE\"\n  fi\nfi\n\n# Install packages from packages.conf\nif [[ \"$INSTALL_PACKAGES\" == true ]]; then\n  # Source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"Error: packages.conf not found!\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"Starting system setup...\"\n\n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n\n  # Function to install packages in batches\n  install_packages() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"Installing packages...\"\n\n    # Install in batches of 20 to avoid command line length issues\n    local batch_size=20\n    local total_packages=${#packages[@]}\n    local batches=$(( (total_packages + batch_size - 1) / batch_size ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batch_size))\n      local end=$(( (i+1) * batch_size > total_packages ? total_packages : (i+1) * batch_size ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"Installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # Install all packages\n  install_packages \"${PACKAGES[@]}\"\n\n  # Enable services\n  echo \"Configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"Enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# Install flatpaks\nif [[ \"$INSTALL_FLATPAKS\" == true ]]; then\n  echo \"Installing flatpaks...\"\n\n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALL_FONTS\" == true ]]; then\n  echo \"Installing fonts...\"\n\n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"Cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"Setup complete! You may want to reboot your system.\"\n","modifiedCode":"#!/bin/bash\n\n# Print the logo\nprint_logo() {\n    cat << \"EOF\"\n    ______                _ __    __\n   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  Fedora System Crafting Tool\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   by: typecraft\n\nEOF\n}\n\n# Function to display help\nshow_help() {\n  echo \"Usage: $0 [OPTION]\"\n  echo \"Options:\"\n  echo \"  -h, --help                 Display this help message\"\n  echo \"  -a, --all                  Install everything (default)\"\n  echo \"  -p, --packages             Install packages from packages.conf\"\n  echo \"  -f, --flatpaks             Install flatpaks\"\n  echo \"  -t, --fonts                Install fonts\"\n  echo \"  -d, --download [FILENAME]  Install packages from a file\"\n  echo \"                             Default: fedora-packages-rpm.txt\"\n  echo \"  -e, --export               Export currently installed packages to a file\"\n  echo \"                             Creates fedora-packages-rpm.txt\"\n  echo \"  -c, --current              Export and install currently installed packages\"\n  echo\n}\n\n# Parse command line arguments\nINSTALL_PACKAGES=false\nINSTALL_FLATPAKS=false\nINSTALL_FONTS=false\nEXPORT_PACKAGES=false\nIMPORT_PACKAGES=false\nIMPORT_FILE=\"\"\n\n# If no arguments, install everything\nif [ $# -eq 0 ]; then\n  INSTALL_PACKAGES=true\n  INSTALL_FLATPAKS=true\n  INSTALL_FONTS=true\nfi\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -a|--all)\n      INSTALL_PACKAGES=true\n      INSTALL_FLATPAKS=true\n      INSTALL_FONTS=true\n      shift\n      ;;\n    -p|--packages)\n      INSTALL_PACKAGES=true\n      shift\n      ;;\n    -f|--flatpaks)\n      INSTALL_FLATPAKS=true\n      shift\n      ;;\n    -t|--fonts)\n      INSTALL_FONTS=true\n      shift\n      ;;\n    -e|--export)\n      EXPORT_PACKAGES=true\n      shift\n      ;;\n    -d|--download)\n      IMPORT_PACKAGES=true\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORT_FILE=\"$2\"\n        shift\n      else\n        IMPORT_FILE=\"fedora-packages-rpm.txt\"\n      fi\n      shift\n      ;;\n    -c|--current)\n      EXPORT_PACKAGES=true\n      IMPORT_PACKAGES=true\n      shift\n      ;;\n    *)\n      echo \"Unknown option: $1\"\n      show_help\n      exit 1\n      ;;\n  esac\ndone\n\n# Clear screen and show logo\nclear\nprint_logo\n\n# Exit on any error\nset -e\n\n# Export packages if requested\nif [[ \"$EXPORT_PACKAGES\" == true ]]; then\n  echo \"Exporting currently installed packages...\"\n\n  # Export to both formats\n  RPM_OUTPUT_FILE=\"./fedora-packages-rpm.txt\"\n  CONF_OUTPUT_FILE=\"./packages-exported.conf\"\n\n  echo \"Exporting installed packages to $RPM_OUTPUT_FILE and $CONF_OUTPUT_FILE...\"\n\n  # Export to rpm text format\n  echo \"# Fedora packages installed on $(date)\" > \"$RPM_OUTPUT_FILE\"\n  echo \"# Generated by Furnace\" >> \"$RPM_OUTPUT_FILE\"\n  echo \"\" >> \"$RPM_OUTPUT_FILE\"\n  echo \"# User-installed packages\" >> \"$RPM_OUTPUT_FILE\"\n  rpm -qa --qf \"%{NAME}\\n\" | sort >> \"$RPM_OUTPUT_FILE\"\n\n  # Export to packages.conf format\n  echo \"# Fedora packages installed on $(date)\" > \"$CONF_OUTPUT_FILE\"\n  echo \"# Generated by Furnace\" >> \"$CONF_OUTPUT_FILE\"\n  echo \"\" >> \"$CONF_OUTPUT_FILE\"\n  echo \"# All packages to install\" >> \"$CONF_OUTPUT_FILE\"\n  echo \"PACKAGES=(\" >> \"$CONF_OUTPUT_FILE\"\n\n  # Get the list of installed packages\n  rpm -qa --qf \"%{NAME}\\n\" | sort | while read -r package; do\n    echo \"  $package\" >> \"$CONF_OUTPUT_FILE\"\n  done\n\n  echo \")\" >> \"$CONF_OUTPUT_FILE\"\n  echo \"\" >> \"$CONF_OUTPUT_FILE\"\n  echo \"# services\" >> \"$CONF_OUTPUT_FILE\"\n  echo \"SERVICES=(\" >> \"$CONF_OUTPUT_FILE\"\n  echo \"  NetworkManager.service\" >> \"$CONF_OUTPUT_FILE\"\n  echo \"  bluetooth.service\" >> \"$CONF_OUTPUT_FILE\"\n  echo \")\" >> \"$CONF_OUTPUT_FILE\"\n\n  echo \"Package list exported successfully to $RPM_OUTPUT_FILE and $CONF_OUTPUT_FILE\"\nfi\n\n# Import packages if requested\nif [[ \"$IMPORT_PACKAGES\" == true ]]; then\n  if [[ -z \"$IMPORT_FILE\" ]]; then\n    IMPORT_FILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORT_FILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORT_FILE\"\n    exit 1\n  fi\n\n  echo \"Installing packages from $IMPORT_FILE...\"\n\n  # Read packages from file, skipping comments and empty lines\n  PACKAGES=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # Skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # Check if the package is already installed\n      if ! rpm -q \"$line\" &> /dev/null; then\n        PACKAGES+=(\"$line\")\n      fi\n    fi\n  done < \"$IMPORT_FILE\"\n\n  # Install packages in batches of 50 to avoid command line length issues\n  if [ ${#PACKAGES[@]} -ne 0 ]; then\n    echo \"Found ${#PACKAGES[@]} packages to install\"\n\n    # Install in batches of 50\n    BATCH_SIZE=50\n    TOTAL_PACKAGES=${#PACKAGES[@]}\n    BATCHES=$(( (TOTAL_PACKAGES + BATCH_SIZE - 1) / BATCH_SIZE ))\n\n    for ((i=0; i<BATCHES; i++)); do\n      START=$((i * BATCH_SIZE))\n      END=$(( (i+1) * BATCH_SIZE > TOTAL_PACKAGES ? TOTAL_PACKAGES : (i+1) * BATCH_SIZE ))\n      BATCH=(\"${PACKAGES[@]:START:END-START}\")\n\n      echo \"Installing batch $((i+1))/$BATCHES ($(( END - START )) packages)...\"\n      sudo dnf install -y \"${BATCH[@]}\"\n    done\n\n    echo \"All packages have been installed!\"\n  else\n    echo \"No new packages found to install in $IMPORT_FILE\"\n  fi\nfi\n\n# Install packages from packages.conf\nif [[ \"$INSTALL_PACKAGES\" == true ]]; then\n  # Source the package list\n  if [ ! -f \"packages.conf\" ]; then\n    echo \"Error: packages.conf not found!\"\n    exit 1\n  fi\n\n  source packages.conf\n\n  echo \"Starting system setup...\"\n\n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n\n  # Function to install packages in batches\n  install_packages() {\n    local packages=(\"$@\")\n\n    if [ ${#packages[@]} -eq 0 ]; then\n      return\n    fi\n\n    echo \"Installing packages...\"\n\n    # Install in batches of 20 to avoid command line length issues\n    local batch_size=20\n    local total_packages=${#packages[@]}\n    local batches=$(( (total_packages + batch_size - 1) / batch_size ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batch_size))\n      local end=$(( (i+1) * batch_size > total_packages ? total_packages : (i+1) * batch_size ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"Installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  }\n\n  # Install all packages\n  install_packages \"${PACKAGES[@]}\"\n\n  # Enable services\n  echo \"Configuring services...\"\n  for service in \"${SERVICES[@]}\"; do\n    if ! systemctl is-enabled \"$service\" &> /dev/null; then\n      echo \"Enabling $service...\"\n      sudo systemctl enable \"$service\"\n    else\n      echo \"$service is already enabled\"\n    fi\n  done\nfi\n\n# Install flatpaks\nif [[ \"$INSTALL_FLATPAKS\" == true ]]; then\n  echo \"Installing flatpaks...\"\n\n  FLATPAKS=(\n    \"app.zen_browser.zen\"\n  )\n\n  for pak in \"${FLATPAKS[@]}\"; do\n    if ! flatpak list | grep -i \"$pak\" &> /dev/null; then\n      echo \"installing flatpak: $pak\"\n      flatpak install --noninteractive \"$pak\"\n    else\n      echo \"flatpak already installed: $pak\"\n    fi\n  done\nfi\n\n# Install fonts\nif [[ \"$INSTALL_FONTS\" == true ]]; then\n  echo \"Installing fonts...\"\n\n  if wget -q https://github.com/g5becks/Cartograph/archive/refs/heads/main.zip; then\n    mkdir -p \"$HOME/.local/share/fonts/CartographCF/\" && unzip -o -q \"main.zip\" -d \"$HOME/.local/share/fonts/CartographCF/\" && echo \"Cartograph CF installed successfully\"\n  else\n    echo\n    echo \"failed to download cartograph CF :(\"\n  fi\nfi\n\necho \"Setup complete! You may want to reboot your system.\"\n"}