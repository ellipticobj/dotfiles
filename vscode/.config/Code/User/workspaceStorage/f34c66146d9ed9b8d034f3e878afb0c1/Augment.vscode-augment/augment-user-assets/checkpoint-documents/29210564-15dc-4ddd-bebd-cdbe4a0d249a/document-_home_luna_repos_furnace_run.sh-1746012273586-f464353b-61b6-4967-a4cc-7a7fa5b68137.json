{"path":{"rootPath":"/home/luna/repos/furnace","relPath":"run.sh"},"originalCode":"#!/bin/bash\n\n# Print the logo\nprint_logo() {\n    cat << \"EOF\"\n    ______                _ __    __\n   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  Fedora System Crafting Tool\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   by: typecraft\n\nEOF\n}\n\n# Function to display help\nshow_help() {\n  echo \"Usage: $0 [OPTION]\"\n  echo \"Options:\"\n  echo \"  -h, --help                 Display this help message\"\n  echo \"  -i, --install              Install packages from packages.conf (default)\"\n  echo \"  -e, --export [FILENAME]    Export currently installed packages to a file\"\n  echo \"                             Default: ./exported-packages-$(date +%Y%m%d).txt\"\n  echo \"  -d, --download [FILENAME]  Download and install packages from a file\"\n  echo \"                             If no file is specified, it will look for the most recent export\"\n  echo\n}\n\n# Parse command line arguments\nMODE=\"install\"\nEXPORT_FILE=\"\"\nIMPORT_FILE=\"\"\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -i|--install)\n      MODE=\"install\"\n      shift\n      ;;\n    -e|--export)\n      MODE=\"export\"\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        EXPORT_FILE=\"$2\"\n        shift\n      else\n        EXPORT_FILE=\"./exported-packages-$(date +%Y%m%d).txt\"\n      fi\n      shift\n      ;;\n    -d|--download)\n      MODE=\"download\"\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORT_FILE=\"$2\"\n        shift\n      fi\n      shift\n      ;;\n    *)\n      echo \"Unknown option: $1\"\n      show_help\n      exit 1\n      ;;\n  esac\ndone\n\n# Clear screen and show logo\nclear\nprint_logo\n\n# Exit on any error\nset -e\n\n# Source utility functions\nsource utils.sh\n\n# Handle export mode\nif [[ \"$MODE\" == \"export\" ]]; then\n  if [[ -z \"$EXPORT_FILE\" ]]; then\n    EXPORT_FILE=\"./exported-packages-$(date +%Y%m%d).txt\"\n  fi\n  export_installed_packages \"$EXPORT_FILE\"\n  exit 0\nfi\n\n# Handle download mode\nif [[ \"$MODE\" == \"download\" ]]; then\n  if [[ -z \"$IMPORT_FILE\" ]]; then\n    # Find the most recent export file\n    IMPORT_FILE=$(ls -t ./exported-packages-*.txt 2>/dev/null | head -n 1)\n    if [[ -z \"$IMPORT_FILE\" ]]; then\n      echo \"Error: No export file found. Please specify a file with --download FILENAME\"\n      exit 1\n    fi\n    echo \"Using most recent export file: $IMPORT_FILE\"\n  fi\n\n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n\n  # Import and install packages\n  import_and_install_packages \"$IMPORT_FILE\"\n\n  # Install flatpaks if the script exists\n  if [ -f \"install-flatpaks.sh\" ]; then\n    echo \"Installing flatpaks...\"\n    . install-flatpaks.sh\n  fi\n\n  echo \"Download and installation complete! You may want to reboot your system.\"\n  exit 0\nfi\n\n# Continue with installation mode from packages.conf\n# Source the package list\nif [ ! -f \"packages.conf\" ]; then\n  echo \"Error: packages.conf not found!\"\n  exit 1\nfi\n\nsource packages.conf\n\necho \"Starting system setup...\"\n\n# Update the system first\necho \"Updating system...\"\nsudo dnf upgrade -y\n\n# Install packages by category\necho \"Installing system utilities...\"\ninstall_packages \"${SYSTEM_UTILS[@]}\"\n\necho \"Installing development tools...\"\ninstall_packages \"${DEV_TOOLS[@]}\"\n\necho \"Installing system maintenance tools...\"\ninstall_packages \"${MAINTENANCE[@]}\"\n\necho \"Installing desktop environment...\"\ninstall_packages \"${DESKTOP[@]}\"\n\nif [[ -n \"${OFFICE[@]}\" ]]; then\n  echo \"Installing office applications...\"\n  install_packages \"${OFFICE[@]}\"\nfi\n\necho \"Installing media packages...\"\ninstall_packages \"${MEDIA[@]}\"\n\necho \"Installing fonts...\"\ninstall_packages \"${FONTS[@]}\"\n\n# Enable services\necho \"Configuring services...\"\nfor service in \"${SERVICES[@]}\"; do\n  if ! systemctl is-enabled \"$service\" &> /dev/null; then\n    echo \"Enabling $service...\"\n    sudo systemctl enable \"$service\"\n  else\n    echo \"$service is already enabled\"\n  fi\ndone\n\n# Some programs just run better as flatpaks. Like discord/spotify\nif [ -f \"install-flatpaks.sh\" ]; then\n  echo \"Installing flatpaks...\"\n  . install-flatpaks.sh\nfi\n\necho \"Setup complete! You may want to reboot your system.\"\n","modifiedCode":"#!/bin/bash\n\n# Print the logo\nprint_logo() {\n    cat << \"EOF\"\n    ______                _ __    __\n   / ____/______  _______(_) /_  / /__\n  / /   / ___/ / / / ___/ / __ \\/ / _ \\\n / /___/ /  / /_/ / /__/ / /_/ / /  __/  Fedora System Crafting Tool\n \\____/_/   \\__,_/\\___/_/_.___/_/\\___/   by: typecraft\n\nEOF\n}\n\n# Function to display help\nshow_help() {\n  echo \"Usage: $0 [OPTION]\"\n  echo \"Options:\"\n  echo \"  -h, --help                 Display this help message\"\n  echo \"  -i, --install              Install packages from packages.conf (default)\"\n  echo \"  -e, --export               Export currently installed packages to a file\"\n  echo \"                             Creates fedora-packages-rpm.txt\"\n  echo \"  -d, --download [FILENAME]  Download and install packages from a file\"\n  echo \"                             Default: fedora-packages-rpm.txt\"\n  echo \"  -c, --current              Export and install currently installed packages\"\n  echo \"                             This is a shortcut for exporting and then installing\"\n  echo\n}\n\n# Parse command line arguments\nMODE=\"install\"\nIMPORT_FILE=\"\"\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    -h|--help)\n      show_help\n      exit 0\n      ;;\n    -i|--install)\n      MODE=\"install\"\n      shift\n      ;;\n    -e|--export)\n      MODE=\"export\"\n      shift\n      ;;\n    -d|--download)\n      MODE=\"download\"\n      if [[ -n \"$2\" && ! \"$2\" =~ ^- ]]; then\n        IMPORT_FILE=\"$2\"\n        shift\n      fi\n      shift\n      ;;\n    -c|--current)\n      MODE=\"current\"\n      shift\n      ;;\n    *)\n      echo \"Unknown option: $1\"\n      show_help\n      exit 1\n      ;;\n  esac\ndone\n\n# Clear screen and show logo\nclear\nprint_logo\n\n# Exit on any error\nset -e\n\n# Handle export mode\nif [[ \"$MODE\" == \"export\" ]]; then\n  echo \"Exporting currently installed packages...\"\n  ./rpm-export.sh\n  exit 0\nfi\n\n# Handle download mode\nif [[ \"$MODE\" == \"download\" ]]; then\n  if [[ -z \"$IMPORT_FILE\" ]]; then\n    IMPORT_FILE=\"fedora-packages-rpm.txt\"\n  fi\n\n  if [ ! -f \"$IMPORT_FILE\" ]; then\n    echo \"Error: Package list file not found: $IMPORT_FILE\"\n    exit 1\n  fi\n\n  # Update the system first\n  echo \"Updating system...\"\n  sudo dnf upgrade -y\n\n  # Import and install packages\n  ./install-packages.sh \"$IMPORT_FILE\"\n\n  # Install flatpaks if the script exists\n  if [ -f \"install-flatpaks.sh\" ]; then\n    echo \"Installing flatpaks...\"\n    . install-flatpaks.sh\n  fi\n\n  echo \"Download and installation complete! You may want to reboot your system.\"\n  exit 0\nfi\n\n# Handle current mode (export and install)\nif [[ \"$MODE\" == \"current\" ]]; then\n  echo \"Exporting currently installed packages...\"\n  ./rpm-export.sh\n\n  echo \"Installing exported packages...\"\n  ./install-packages.sh \"fedora-packages-rpm.txt\"\n\n  # Install flatpaks if the script exists\n  if [ -f \"install-flatpaks.sh\" ]; then\n    echo \"Installing flatpaks...\"\n    . install-flatpaks.sh\n  fi\n\n  echo \"Export and installation complete! You may want to reboot your system.\"\n  exit 0\nfi\n\n# Continue with installation mode from packages.conf\n# Source the package list\nif [ ! -f \"packages.conf\" ]; then\n  echo \"Error: packages.conf not found!\"\n  exit 1\nfi\n\nsource packages.conf\n\necho \"Starting system setup...\"\n\n# Update the system first\necho \"Updating system...\"\nsudo dnf upgrade -y\n\n# Install packages by category\necho \"Installing system utilities...\"\nfor pkg in \"${SYSTEM_UTILS[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\necho \"Installing development tools...\"\nfor pkg in \"${DEV_TOOLS[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\necho \"Installing system maintenance tools...\"\nfor pkg in \"${MAINTENANCE[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\necho \"Installing desktop environment...\"\nfor pkg in \"${DESKTOP[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\nif [[ -n \"${OFFICE[@]}\" ]]; then\n  echo \"Installing office applications...\"\n  for pkg in \"${OFFICE[@]}\"; do\n    sudo dnf install -y \"$pkg\"\n  done\nfi\n\necho \"Installing media packages...\"\nfor pkg in \"${MEDIA[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\necho \"Installing fonts...\"\nfor pkg in \"${FONTS[@]}\"; do\n  sudo dnf install -y \"$pkg\"\ndone\n\n# Enable services\necho \"Configuring services...\"\nfor service in \"${SERVICES[@]}\"; do\n  if ! systemctl is-enabled \"$service\" &> /dev/null; then\n    echo \"Enabling $service...\"\n    sudo systemctl enable \"$service\"\n  else\n    echo \"$service is already enabled\"\n  fi\ndone\n\n# Some programs just run better as flatpaks. Like discord/spotify\nif [ -f \"install-flatpaks.sh\" ]; then\n  echo \"Installing flatpaks...\"\n  . install-flatpaks.sh\nfi\n\necho \"Setup complete! You may want to reboot your system.\"\n"}