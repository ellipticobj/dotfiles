{"path":{"rootPath":"/home/luna/repos/furnace","relPath":"utils.sh"},"originalCode":"#!/bin/bash\n\n# Function to check if a package is installed\nis_installed() {\n  rpm -q \"$1\" &> /dev/null\n}\n\n# Function to check if a package group is installed\nis_group_installed() {\n  dnf group list --installed | grep -i \"$1\" &> /dev/null\n}\n\n# Function to install packages if not already installed\ninstall_packages() {\n  local packages=(\"$@\")\n  local to_install=()\n\n  for pkg in \"${packages[@]}\"; do\n    if ! is_installed \"$pkg\" && ! is_group_installed \"$pkg\"; then\n      to_install+=(\"$pkg\")\n    fi\n  done\n\n  if [ ${#to_install[@]} -ne 0 ]; then\n    echo \"Installing: ${to_install[*]}\"\n    sudo dnf install -y \"${to_install[@]}\"\n  fi\n}\n\n# Function to export currently installed packages\nexport_installed_packages() {\n  local output_file=\"$1\"\n\n  echo \"Exporting installed packages to $output_file...\"\n\n  # Create directory if it doesn't exist\n  mkdir -p \"$(dirname \"$output_file\")\"\n\n  # Export explicitly installed packages (not dependencies)\n  echo \"# Fedora packages installed on $(date)\" > \"$output_file\"\n  echo \"# Generated by Furnace\" >> \"$output_file\"\n  echo \"\" >> \"$output_file\"\n\n  # Get user-installed packages (not dependencies or base system packages)\n  dnf repoquery --userinstalled --queryformat \"%{name}\" | sort > \"$output_file.tmp\"\n\n  # Read the temporary file and write each package on a new line\n  while IFS= read -r pkg; do\n    echo \"$pkg\" >> \"$output_file\"\n  done < \"$output_file.tmp\"\n\n  # Remove temporary file\n  rm -f \"$output_file.tmp\"\n\n  # Export installed groups\n  echo -e \"\\n# Package Groups\" >> \"$output_file\"\n  dnf group list --installed 2>/dev/null | grep -A 100 \"Installed Groups:\" | tail -n +2 | grep -v \"^$\" | sed 's/^[ \\t]*//' >> \"$output_file\"\n\n  echo \"Package list exported successfully to $output_file\"\n}\n\n# Function to import and install packages from a file\nimport_and_install_packages() {\n  local input_file=\"$1\"\n\n  if [ ! -f \"$input_file\" ]; then\n    echo \"Error: Package list file not found: $input_file\"\n    return 1\n  fi\n\n  echo \"Installing packages from $input_file...\"\n\n  # Read packages from file, skipping comments and empty lines\n  local packages=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # Skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      packages+=(\"$line\")\n    fi\n  done < \"$input_file\"\n\n  # Install packages\n  if [ ${#packages[@]} -ne 0 ]; then\n    install_packages \"${packages[@]}\"\n  else\n    echo \"No packages found in $input_file\"\n  fi\n}","modifiedCode":"#!/bin/bash\n\n# Function to check if a package is installed\nis_installed() {\n  rpm -q \"$1\" &> /dev/null\n}\n\n# Function to check if a package group is installed\nis_group_installed() {\n  dnf group list --installed | grep -i \"$1\" &> /dev/null\n}\n\n# Function to install packages if not already installed\ninstall_packages() {\n  local packages=(\"$@\")\n  local to_install=()\n\n  for pkg in \"${packages[@]}\"; do\n    if ! is_installed \"$pkg\" && ! is_group_installed \"$pkg\"; then\n      to_install+=(\"$pkg\")\n    fi\n  done\n\n  if [ ${#to_install[@]} -ne 0 ]; then\n    echo \"Installing: ${to_install[*]}\"\n    sudo dnf install -y \"${to_install[@]}\"\n  fi\n}\n\n# Function to export currently installed packages\nexport_installed_packages() {\n  local output_file=\"$1\"\n\n  echo \"Exporting installed packages to $output_file...\"\n\n  # Create directory if it doesn't exist\n  mkdir -p \"$(dirname \"$output_file\")\"\n\n  # Export explicitly installed packages (not dependencies)\n  echo \"# Fedora packages installed on $(date)\" > \"$output_file\"\n  echo \"# Generated by Furnace\" >> \"$output_file\"\n  echo \"\" >> \"$output_file\"\n\n  # Get user-installed packages (not dependencies or base system packages)\n  dnf repoquery --userinstalled --queryformat \"%{name}\" | sort > \"$output_file.tmp\"\n\n  # Read the temporary file and write each package on a new line\n  while IFS= read -r pkg; do\n    echo \"$pkg\" >> \"$output_file\"\n  done < \"$output_file.tmp\"\n\n  # Remove temporary file\n  rm -f \"$output_file.tmp\"\n\n  # Export installed groups\n  echo -e \"\\n# Package Groups\" >> \"$output_file\"\n  dnf group list --installed 2>/dev/null | grep -A 100 \"Installed Groups:\" | tail -n +2 | grep -v \"^$\" | sed 's/^[ \\t]*//' >> \"$output_file\"\n\n  echo \"Package list exported successfully to $output_file\"\n}\n\n# Function to import and install packages from a file\nimport_and_install_packages() {\n  local input_file=\"$1\"\n\n  if [ ! -f \"$input_file\" ]; then\n    echo \"Error: Package list file not found: $input_file\"\n    return 1\n  fi\n\n  echo \"Installing packages from $input_file...\"\n\n  # Read packages from file, skipping comments and empty lines\n  local packages=()\n  while IFS= read -r line || [ -n \"$line\" ]; do\n    # Skip comments and empty lines\n    if [[ ! \"$line\" =~ ^#.*$ ]] && [[ -n \"$line\" ]]; then\n      # Check if the package is already installed\n      if ! is_installed \"$line\" && ! is_group_installed \"$line\"; then\n        packages+=(\"$line\")\n      fi\n    fi\n  done < \"$input_file\"\n\n  # Install packages in batches of 50 to avoid command line length issues\n  if [ ${#packages[@]} -ne 0 ]; then\n    echo \"Found ${#packages[@]} packages to install\"\n\n    # Install in batches of 50\n    local batch_size=50\n    local total_packages=${#packages[@]}\n    local batches=$(( (total_packages + batch_size - 1) / batch_size ))\n\n    for ((i=0; i<batches; i++)); do\n      local start=$((i * batch_size))\n      local end=$(( (i+1) * batch_size > total_packages ? total_packages : (i+1) * batch_size ))\n      local batch=(\"${packages[@]:start:end-start}\")\n\n      echo \"Installing batch $((i+1))/$batches ($(( end - start )) packages)...\"\n      sudo dnf install -y \"${batch[@]}\"\n    done\n  else\n    echo \"No new packages found to install in $input_file\"\n  fi\n}"}